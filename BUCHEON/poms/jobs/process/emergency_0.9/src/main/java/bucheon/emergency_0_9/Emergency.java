// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package bucheon.emergency_0_9;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Emergency Purpose: <br>
 * Description: 응급의료센터 매일아침보고자료 <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Emergency implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cmctalk_user != null){
				
					this.setProperty("cmctalk_user", cmctalk_user.toString());
				
			}
			
			if(cmctalk_password != null){
				
					this.setProperty("cmctalk_password", cmctalk_password.toString());
				
			}
			
			if(cmctalk_roomno != null){
				
					this.setProperty("cmctalk_roomno", cmctalk_roomno.toString());
				
			}
			
		}

public String cmctalk_user;
public String getCmctalk_user(){
	return this.cmctalk_user;
}
public String cmctalk_password;
public String getCmctalk_password(){
	return this.cmctalk_password;
}
public String cmctalk_roomno;
public String getCmctalk_roomno(){
	return this.cmctalk_roomno;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.9";
	private final String jobName = "Emergency";
	private final String projectName = "BUCHEON";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Emergency.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Emergency.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputProperties_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWaitForFile_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSystem_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSystem_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputProperties_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWaitForFile_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSystem_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String url_tDBConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "172.17.71.152" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "HIS014" + ")))";
    	globalMap.put("connectionType_" + "tDBConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tDBConnection_1 = "DEVU02";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:VtEFaGRoRvGC3jyUQwAJa69dgGefWNCuT4WT9M2cj95XVg==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			java.util.Properties atnParamsPrope_tDBConnection_1 = new java.util.Properties();
			    atnParamsPrope_tDBConnection_1.put("user",dbUser_tDBConnection_1);
			    atnParamsPrope_tDBConnection_1.put("password",dbPwd_tDBConnection_1);
			if("noDatetimeStringSync=true" != null && !"\"\"".equals("noDatetimeStringSync=true") && !"".equals("noDatetimeStringSync=true")){
                atnParamsPrope_tDBConnection_1.load(new java.io.ByteArrayInputStream("noDatetimeStringSync=true".replace("&", "\n").getBytes()));
            }
         
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, atnParamsPrope_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tDBConnection_1","172.17.71.152");
        globalMap.put("port_" + "tDBConnection_1","1521");
        globalMap.put("dbname_" + "tDBConnection_1","HIS014");

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);
	globalMap.put("dbschema_" + "tDBConnection_1", "");
	globalMap.put("username_" + "tDBConnection_1","DEVU02");
	globalMap.put("password_" + "tDBConnection_1",dbPwd_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputProperties_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputProperties_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputProperties_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputProperties_1", false);
		start_Hash.put("tFileInputProperties_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputProperties_1";

	
		int tos_count_tFileInputProperties_1 = 0;
		

	java.io.File file_tFileInputProperties_1 = new java.io.File("D:/data/EmergencyKPI/CompactCTalkSender/cmctalk.properties");
	int nb_line_tFileInputProperties_1 = 0;
	java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
	java.io.FileInputStream fis_tFileInputProperties_1=new java.io.FileInputStream(file_tFileInputProperties_1);
   	try{
		properties_tFileInputProperties_1.load(fis_tFileInputProperties_1);
		java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1.propertyNames();
		while (enumeration_tFileInputProperties_1.hasMoreElements()) {
			nb_line_tFileInputProperties_1++;
			row3.key = (String)enumeration_tFileInputProperties_1.nextElement();
			row3.value = (String)properties_tFileInputProperties_1.getProperty(row3.key);

 



/**
 * [tFileInputProperties_1 begin ] stop
 */
	
	/**
	 * [tFileInputProperties_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 


	tos_count_tFileInputProperties_1++;

/**
 * [tFileInputProperties_1 main ] stop
 */
	
	/**
	 * [tFileInputProperties_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 process_data_begin ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row3.key != null){
                          tmp_key_tContextLoad_1 = row3.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row3.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row3.key != null) {
                    key_tContextLoad_1 =
                        row3.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row3.value != null) {
                    value_tContextLoad_1 =
                        row3.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
				

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cmctalk_user".equals(key_tContextLoad_1))
        {
           context.cmctalk_user=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cmctalk_password".equals(key_tContextLoad_1))
        {
           context.cmctalk_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cmctalk_roomno".equals(key_tContextLoad_1))
        {
           context.cmctalk_roomno=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */



	
	/**
	 * [tFileInputProperties_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputProperties_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

		}
	}finally{
		if(fis_tFileInputProperties_1!=null){
			fis_tFileInputProperties_1.close();
		}
	}
globalMap.put("tFileInputProperties_1_NB_LINE", nb_line_tFileInputProperties_1);
 

ok_Hash.put("tFileInputProperties_1", true);
end_Hash.put("tFileInputProperties_1", System.currentTimeMillis());




/**
 * [tFileInputProperties_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputProperties_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputProperties_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}
	


public static class userStruct implements routines.system.IPersistableRow<userStruct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String DD;

				public String getDD () {
					return this.DD;
				}
				
			    public String CNT;

				public String getCNT () {
					return this.CNT;
				}
				
			    public String INCNT;

				public String getINCNT () {
					return this.INCNT;
				}
				
			    public String CRINCNT;

				public String getCRINCNT () {
					return this.CRINCNT;
				}
				
			    public String CRINAVGTIME;

				public String getCRINAVGTIME () {
					return this.CRINAVGTIME;
				}
				
			    public String CRRMAVGTIME;

				public String getCRRMAVGTIME () {
					return this.CRRMAVGTIME;
				}
				
			    public String BUFBED;

				public String getBUFBED () {
					return this.BUFBED;
				}
				
			    public String BUFTIME;

				public String getBUFTIME () {
					return this.BUFTIME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.DD = readString(dis);
					
					this.CNT = readString(dis);
					
					this.INCNT = readString(dis);
					
					this.CRINCNT = readString(dis);
					
					this.CRINAVGTIME = readString(dis);
					
					this.CRRMAVGTIME = readString(dis);
					
					this.BUFBED = readString(dis);
					
					this.BUFTIME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DD,dos);
					
					// String
				
						writeString(this.CNT,dos);
					
					// String
				
						writeString(this.INCNT,dos);
					
					// String
				
						writeString(this.CRINCNT,dos);
					
					// String
				
						writeString(this.CRINAVGTIME,dos);
					
					// String
				
						writeString(this.CRRMAVGTIME,dos);
					
					// String
				
						writeString(this.BUFBED,dos);
					
					// String
				
						writeString(this.BUFTIME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DD="+DD);
		sb.append(",CNT="+CNT);
		sb.append(",INCNT="+INCNT);
		sb.append(",CRINCNT="+CRINCNT);
		sb.append(",CRINAVGTIME="+CRINAVGTIME);
		sb.append(",CRRMAVGTIME="+CRRMAVGTIME);
		sb.append(",BUFBED="+BUFBED);
		sb.append(",BUFTIME="+BUFTIME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(userStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String DD;

				public String getDD () {
					return this.DD;
				}
				
			    public String CNT;

				public String getCNT () {
					return this.CNT;
				}
				
			    public String INCNT;

				public String getINCNT () {
					return this.INCNT;
				}
				
			    public String CRINCNT;

				public String getCRINCNT () {
					return this.CRINCNT;
				}
				
			    public String CRINAVGTIME;

				public String getCRINAVGTIME () {
					return this.CRINAVGTIME;
				}
				
			    public String CRRMAVGTIME;

				public String getCRRMAVGTIME () {
					return this.CRRMAVGTIME;
				}
				
			    public String BUFBED;

				public String getBUFBED () {
					return this.BUFBED;
				}
				
			    public String BUFTIME;

				public String getBUFTIME () {
					return this.BUFTIME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.DD = readString(dis);
					
					this.CNT = readString(dis);
					
					this.INCNT = readString(dis);
					
					this.CRINCNT = readString(dis);
					
					this.CRINAVGTIME = readString(dis);
					
					this.CRRMAVGTIME = readString(dis);
					
					this.BUFBED = readString(dis);
					
					this.BUFTIME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DD,dos);
					
					// String
				
						writeString(this.CNT,dos);
					
					// String
				
						writeString(this.INCNT,dos);
					
					// String
				
						writeString(this.CRINCNT,dos);
					
					// String
				
						writeString(this.CRINAVGTIME,dos);
					
					// String
				
						writeString(this.CRRMAVGTIME,dos);
					
					// String
				
						writeString(this.BUFBED,dos);
					
					// String
				
						writeString(this.BUFTIME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DD="+DD);
		sb.append(",CNT="+CNT);
		sb.append(",INCNT="+INCNT);
		sb.append(",CRINCNT="+CRINCNT);
		sb.append(",CRINAVGTIME="+CRINAVGTIME);
		sb.append(",CRRMAVGTIME="+CRRMAVGTIME);
		sb.append(",BUFBED="+BUFBED);
		sb.append(",BUFTIME="+BUFTIME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
userStruct user = new userStruct();





	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"user");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		int nb_line_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="D:/data/EmergencyKPI/응급실KPI_"+TalendDate.formatDate("yyyyMMdd", new Date()) + ".xls";
		java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
		boolean isFileGenerated_tFileOutputExcel_1 = true;
		if(file_tFileOutputExcel_1.exists()){
			isFileGenerated_tFileOutputExcel_1 = false;
		}
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1.getParentFile();
          if (parentFile_tFileOutputExcel_1 != null && !parentFile_tFileOutputExcel_1.exists()) {
        	
             parentFile_tFileOutputExcel_1.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_1.setEncoding("UTF-8");  
        if (file_tFileOutputExcel_1.exists()) {
        jxl.Workbook workbook_tFileOutputExcel_1 = jxl.Workbook.getWorkbook(file_tFileOutputExcel_1,workbookSettings_tFileOutputExcel_1);
        workbookSettings_tFileOutputExcel_1.setWriteAccess(null);
        writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
                	new java.io.BufferedOutputStream(new java.io.FileOutputStream(file_tFileOutputExcel_1, false)), 
                	workbook_tFileOutputExcel_1, 
                	true,
                    workbookSettings_tFileOutputExcel_1);
        }else{        
		writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_1)), 
            		true, 
            		workbookSettings_tFileOutputExcel_1);        
        }     

        writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.getSheet("Sheet1");
        if(writableSheet_tFileOutputExcel_1 == null){
        	writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.createSheet("Sheet1", writeableWorkbook_tFileOutputExcel_1.getNumberOfSheets());
		}


        //modif start
        int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_1 = new int[8];
		for(int i_tFileOutputExcel_1=0;i_tFileOutputExcel_1<8;i_tFileOutputExcel_1++){
		    int fitCellViewSize_tFileOutputExcel_1=writableSheet_tFileOutputExcel_1.getColumnView(i_tFileOutputExcel_1).getSize();
			fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]=fitCellViewSize_tFileOutputExcel_1/256;
			if(fitCellViewSize_tFileOutputExcel_1%256!=0){
				fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]+=1;
			}
		}
		
		jxl.write.WritableFont wf_tFileOutputExcel_1 = new jxl.write.WritableFont(jxl.write.WritableFont.COURIER, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_tFileOutputExcel_1  = new jxl.write.WritableCellFormat(wf_tFileOutputExcel_1); 
		


		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
userStruct user_tmp = new userStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	


	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_1 = false;
				boolean isConnectionWrapped_tDBInput_1 = !(conn_tDBInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_1 = null;
                if (isConnectionWrapped_tDBInput_1) {
					unwrappedOraConn_tDBInput_1 = conn_tDBInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_1 != null) {
                        isTimeZoneNull_tDBInput_1 = (unwrappedOraConn_tDBInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_1 = (((oracle.jdbc.OracleConnection)conn_tDBInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_1) {
					java.sql.Statement stmtGetTZ_tDBInput_1 = conn_tDBInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_1 = stmtGetTZ_tDBInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_1.next()) {
						sessionTimezone_tDBInput_1 = rsGetTZ_tDBInput_1.getString(1);
					}
					if (isConnectionWrapped_tDBInput_1 && unwrappedOraConn_tDBInput_1 != null) {
                        unwrappedOraConn_tDBInput_1.setSessionTimeZone(sessionTimezone_tDBInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_1).setSessionTimeZone(sessionTimezone_tDBInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "WITH EMER AS (\nSELECT TMP1.OUTRMDD\n       ,ERCE.BEDPOSCNTS\n       ,TMP1.OUTRMCD --31:병실로 입원, 32:중환자실로 바로 입원, 34:수술(시"
+"술)실로 간 후 중환자실로 입원\n     --,(select typenm from emr.mnembtms where cdcls = 'BT' and  instcd =  '014' and orddeptcd = 'ALL"
+"' and basetypecd = tmp1.outrmcd) as outrmcdnmdetl --퇴실형태\n       ,CASE WHEN EMR.FN_MN_GETERSDLTDIAG ( INPT.INSTCD, INPT."
+"PID, INPT.INDD, INPT.CRETNO, 'D', 'S', 'N') IS NOT NULL THEN 'Y'\n             ELSE NULL END AS SDDIAGYN -- 중증상병\n      "
+" ,CASE WHEN INPT.INPATH = '1' AND TMP1.OUTRMCD LIKE '3%'\n             THEN '외래경유 입원'\n             WHEN INPT.INPATH = '"
+"1'\n             THEN '외래경유 내원'\n             WHEN TMP1.OUTRMCD = '14'\n             THEN 'DAMA'\n             WHEN TMP1"
+".OUTRMCD = '13'\n             THEN 'Hopeless Discharge'\n             WHEN TMP1.OUTRMCD = '19'\n             THEN '외래처치대"
+"행'\n             WHEN TMP1.OUTRMCD LIKE '1%'\n             THEN '귀가'\n             WHEN TMP1.OUTRMCD LIKE '2%'\n        "
+"     THEN '전원'\n             WHEN TMP1.OUTRMCD IN ('33', '34')\n             THEN '수술'\n             WHEN TMP1.OUTRMCD L"
+"IKE '3%'\n             THEN '입원'\n             WHEN TMP1.OUTRMCD = '41'\n             THEN 'DOA'\n             WHEN TMP1"
+".OUTRMCD LIKE '4%'\n             THEN '사망'\n             WHEN TMP1.OUTRMCD LIKE '8%'\n             THEN '탈원'\n          "
+"   WHEN TMP1.OUTRMCD LIKE '9%'\n             THEN '기타'\n             WHEN TMP1.OUTRMCD IS NULL OR TMP1.OUTRMCD = ''\n   "
+"          THEN '응급실재원'\n             END AS OUTRMCDNM  --퇴실구분 : \n       ,(CASE WHEN (TMP1.OUTRMDD IS NULL OR TMP1.OUTRM"
+"DD = '-')\n                    AND (TMP1.CHOSDD IS NULL OR TMP1.CHOSDD = '-')\n              THEN NULL\n              EL"
+"SE ROUND (( TO_DATE(SUBSTR(TMP1.OUTRMDD || TMP1.OUTRMTM,1,12) , 'yyyymmddhh24mi')\n                         - TO_DATE( S"
+"UBSTR(TMP1.CHOSDD || TMP1.CHOSTM,1,12), 'yyyymmddhh24mi' )) * 24 * 60 )\n              END) AS OUTMODIN         -- 퇴실 - "
+"입실\n       ,(SELECT CHNGROOMCD \n           FROM PAM.PMIHCDCR\n          WHERE INSTCD = INPT.INSTCD\n            AND PID"
+" = INPT.PID\n            AND INDD = INPT.INDD\n            AND CRETNO = INPT.CRETNO\n            AND MSKIND = 'M'\n     "
+"       AND HISTSTAT = 'Y'\n            AND ACPTFLAGCD = '3'\n            AND APPFLAGCD IN ('1','3')\n            AND PRE"
+"STWARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD = INPT.INSTCD AND CDGRUPID = '002' AND TMP1.OUTRMDD BETWEEN VALI"
+"FROMDD AND VALITODD)\n            AND SEQNO = (SELECT MIN(SEQNO) \n                           FROM PAM.PMIHCDCR\n       "
+"                   WHERE INSTCD = INPT.INSTCD\n                            AND PID = INPT.PID\n                         "
+"   AND INDD = INPT.INDD\n                            AND CRETNO = INPT.CRETNO\n                            AND MSKIND = "
+"'M'\n                            AND HISTSTAT = 'Y'\n                            AND ACPTFLAGCD = '3'\n                 "
+"           AND APPFLAGCD IN ('1','3')\n                            AND PRESTWARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHE"
+"RE INSTCD = INPT.INSTCD AND CDGRUPID = '002' AND TMP1.OUTRMDD BETWEEN VALIFROMDD AND VALITODD)\n                        "
+"   )) AS OUTROOMCD --퇴실시 배정병동.\n  FROM (\n       SELECT\n           PID\n          ,INDD\n          ,INSTCD\n          ,"
+"CRETNO\n          ,VISITNO\n          ,CHOSDD\n          ,CHOSTM\n          ,OUTRMDD\n          ,OUTRMTM\n          ,OUT"
+"RMCD\n          ,OUTDECIDT\n          ,LASTPATZONE   --최종진료구역 추가 2017.08.24 jkj\n          ,MAX(DECODE(MAINYN , 'M', DEP"
+"TENGABBR, NULL))  MAINDEPT\n          ,MAX(DECODE(MAINYN , 'M', CALLDT, NULL))  MAINCALLDT\n          ,MAX(DECODE(MAINYN"
+" , 'M', ARRIVDT, NULL))  MAINARRIVDT\n          ,MAX(DECODE(MAINYN , 'M', ERORDDOCTCD, NULL))  MAINDOCTCD\n          ,MA"
+"X(CASE WHEN MAINYN = 'S' AND MRNUM = 1 THEN  DEPTENGABBR ELSE NULL END) DEPT1\n          ,MAX(CASE WHEN MAINYN = 'S' AND"
+" MRNUM = 1 THEN  CALLDT ELSE NULL END)  CALLDT1\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 1 THEN  ARRIVDT ELSE "
+"NULL END)  ARRIVDT1\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  DEPTENGABBR ELSE NULL END) DEPT2\n       "
+"   ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  CALLDT ELSE NULL END)  CALLDT2\n          ,MAX(CASE WHEN MAINYN = 'S'"
+" AND MRNUM = 2 THEN  ARRIVDT ELSE NULL END)  ARRIVDT2\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  DEPTENG"
+"ABBR ELSE NULL END) DEPT3\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  CALLDT ELSE NULL END)  CALLDT3\n   "
+"       ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  ARRIVDT ELSE NULL END)  ARRIVDT3\n          ,MAX(CASE WHEN MAINYN"
+" = 'S' AND MRNUM = 4 THEN  DEPTENGABBR ELSE NULL END) DEPT4\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 4 THEN  C"
+"ALLDT ELSE NULL END)  CALLDT4\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 4 THEN  ARRIVDT ELSE NULL END)  ARRIVDT"
+"4\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THEN  DEPTENGABBR ELSE NULL END) DEPT5\n          ,MAX(CASE WHEN "
+"MAINYN = 'S' AND MRNUM = 5 THEN  CALLDT ELSE NULL END)  CALLDT5\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THE"
+"N  ARRIVDT ELSE NULL END)  ARRIVDT5\n      FROM (\n            SELECT\n                   ERVD.PID\n                  ,E"
+"RVD.INDD\n                  ,ERVD.INSTCD\n                  ,ERVD.CRETNO\n                  ,ERVD.VISITNO\n             "
+"     ,ERVD.CHOSDD\n                  ,ERVD.CHOSTM\n                  ,ERVD.OUTRMDD\n                  ,ERVD.OUTRMTM\n   "
+"               ,ERVD.OUTRMCD\n                  ,ERVD.OUTDECIDT\n                  ,ERVD.LASTPATZONE   --최종진료구역 추가 2017."
+"08.24 jkj\n                  ,ERCD.CALLDT\n                  ,ERCD.ARRIVDT\n                  ,ERCD.MAINYN\n            "
+"      ,ERCD.ERORDDEPTCD\n                  ,ERCD.ERORDDOCTCD\n                  ,DEPT.DEPTENGABBR\n                  ,RO"
+"W_NUMBER () OVER (PARTITION BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN ORDER BY ERVD.INDD, ERVD.PID"
+",  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN, ERCD.CALLDT) MRNUM\n                  ,ROW_NUMBER () OVER (PARTITION BY ERVD."
+"INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO ORDER BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN, ERCD.C"
+"ALLDT) RNUM\n              FROM EMR.MNEHERVD ERVD\n                  ,EMR.MNEHERCD ERCD\n                  ,COM.ZSDDDEPT"
+" DEPT\n             WHERE ERVD.INSTCD =  '014'\n               AND ERVD.OUTRMDD BETWEEN  TO_CHAR(SYSDATE -1, 'YYYYMMDD')"
+" AND TO_CHAR(SYSDATE -1, 'YYYYMMDD')\n               AND ERVD.OUTRMDD IS NOT NULL\n               AND ERVD.INCNCLDT = '-"
+"'\n               AND ERVD.PID = ERCD.PID(+)\n               AND ERVD.INDD = ERCD.INDD(+)\n               AND ERVD.CRETN"
+"O = ERCD.CRETNO(+)\n               AND ERVD.VISITNO = ERCD.VISITNO(+)\n               AND ERVD.INSTCD = ERCD.INSTCD(+)\n"
+"               AND ERCD.HISTCD(+) = 'O'\n               AND ERCD.CALLDT(+) !='--------------'\n               AND ERCD.E"
+"RORDDEPTCD = DEPT.DEPTCD(+)\n               AND DEPT.INSTCD(+) =  '014'\n               AND DEPT.VALIFROMDD(+) <= TO_CHA"
+"R(SYSDATE, 'YYYYMMDD')\n               AND DEPT.VALITODD(+) >= TO_CHAR(SYSDATE, 'YYYYMMDD')\n            )\n        GROU"
+"P BY PID,INDD,INSTCD,CRETNO,VISITNO,CHOSDD,CHOSTM,OUTRMDD,OUTRMTM,OUTRMCD,OUTDECIDT,LASTPATZONE   --최종진료구역 추가 2017.08.24"
+" jkj\n  ) TMP1\n   ,PAM.PMIHINPT INPT\n   ,EMR.MNEHERCE ERCE\nWHERE TMP1.PID = INPT.PID\nAND TMP1.INDD = INPT.INDD\nAND "
+"TMP1.CRETNO = INPT.CRETNO\nAND TMP1.INSTCD = INPT.INSTCD\nAND INPT.MSKIND = 'M'\nAND INPT.HISTSTAT = 'Y'\nAND INPT.PID ="
+" ERCE.PID(+)\nAND INPT.INDD = ERCE.INDD(+)\nAND INPT.CRETNO = ERCE.CRETNO(+)\nAND INPT.INSTCD = ERCE.INSTCD(+)\nAND ERCE"
+".INCNCLDT(+) = '-'\nORDER BY OUTRMDD, OUTRMTM\n)\nSELECT '내원날짜' DD\n       ,'내원환자수'||CHR(13)||'(퇴실일기준)' CNT\n       ,'병실"
+"입원'||CHR(13)||'(중증)' INCNT \n       ,'중환자실입원'||CHR(13)||'(중증)' CRINCNT\n       ,'중증상병해당환자의'||CHR(13)||'재실시간(분)' CRINAVGT"
+"IME\n       ,'중환자실 입실 체류시간' CRRMAVGTIME\n       ,'버퍼병상'||CHR(13)||'사용건수' BUFBED\n       ,'버퍼입실전'||CHR(13)||'체류시간' BUFTIM"
+"E\n  FROM DUAL\nUNION ALL\nSELECT OUTRMDD DD\n       ,TO_CHAR(COUNT(*)) CNT\n       ,TO_CHAR(SUM(CASE WHEN OUTRMCD IN ('"
+"31', '33') THEN 1 ELSE 0 END))\n        ||'('||\n        TO_CHAR(SUM(CASE WHEN OUTRMCD IN ('31', '33') AND SDDIAGYN = 'Y"
+"' THEN 1 ELSE 0 END))\n        ||')' INCNT\n       ,TO_CHAR(SUM(CASE WHEN OUTRMCD IN ('32', '34') THEN 1 ELSE 0 END))\n "
+"       ||'('||\n        TO_CHAR(SUM(CASE WHEN OUTRMCD IN ('32', '34') AND SDDIAGYN = 'Y' THEN 1 ELSE 0 END))\n        ||"
+"')' CRINCNT\n       ,CASE WHEN SUM(CASE WHEN BEDPOSCNTS NOT LIKE '%♣%' AND SDDIAGYN = 'Y' AND OUTRMCDNM IN ('수술', '입원') "
+"THEN 1 ELSE 0 END) = 0 THEN '0'\n             ELSE TO_CHAR(ROUND(SUM(CASE WHEN BEDPOSCNTS NOT LIKE '%♣%' AND SDDIAGYN = "
+"'Y' AND OUTRMCDNM IN ('수술', '입원') THEN OUTMODIN ELSE 0 END)\n                / SUM(CASE WHEN BEDPOSCNTS NOT LIKE '%♣%' A"
+"ND SDDIAGYN = 'Y' AND OUTRMCDNM IN ('수술', '입원') THEN 1 ELSE 0 END),0)) \n             END CRINAVGTIME\n       ,'ICU중증 '|"
+"|\n        CASE WHEN SUM(CASE WHEN BEDPOSCNTS NOT LIKE '%♣%' AND SDDIAGYN = 'Y' AND OUTRMCD IN ('32', '34') THEN 1 ELSE "
+"0 END) = 0 THEN '0'\n             ELSE TO_CHAR(ROUND(SUM(CASE WHEN BEDPOSCNTS NOT LIKE '%♣%' AND SDDIAGYN = 'Y' AND OUTR"
+"MCD IN ('32', '34') THEN OUTMODIN ELSE 0 END)\n                / SUM(CASE WHEN BEDPOSCNTS NOT LIKE '%♣%' AND SDDIAGYN = "
+"'Y' AND OUTRMCD IN ('32', '34') THEN 1 ELSE 0 END),0)) END \n        || '분' CRRMAVGTIME\n       ,TO_CHAR(SUM(CASE WHEN O"
+"UTROOMCD IN ('610','611','606','607') THEN 1 ELSE 0 END)) BUFBED\n       ,CASE WHEN SUM(CASE WHEN OUTROOMCD IN ('610','6"
+"11','606','607') THEN 1 ELSE 0 END) = 0 THEN '0'\n             ELSE TO_CHAR(ROUND(SUM(CASE WHEN OUTROOMCD IN ('610','611"
+"','606','607') THEN OUTMODIN ELSE 0 END)\n                      / SUM(CASE WHEN OUTROOMCD IN ('610','611','606','607') T"
+"HEN 1 ELSE 0 END),0)) \n             END BUFTIME\nFROM EMER\nGROUP BY OUTRMDD";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.DD = null;
							} else {
	                         		
        	row1.DD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.CNT = null;
							} else {
	                         		
        	row1.CNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.INCNT = null;
							} else {
	                         		
        	row1.INCNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.CRINCNT = null;
							} else {
	                         		
        	row1.CRINCNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.CRINAVGTIME = null;
							} else {
	                         		
        	row1.CRINAVGTIME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.CRRMAVGTIME = null;
							} else {
	                         		
        	row1.CRRMAVGTIME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.BUFBED = null;
							} else {
	                         		
        	row1.BUFBED = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.BUFTIME = null;
							} else {
	                         		
        	row1.BUFTIME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
					




 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

user = null;


// # Output table : 'user'
user_tmp.DD = row1.DD ;
user_tmp.CNT = row1.CNT ;
user_tmp.INCNT = row1.INCNT ;
user_tmp.CRINCNT = row1.CRINCNT ;
user_tmp.CRINAVGTIME = row1.CRINAVGTIME ;
user_tmp.CRRMAVGTIME = row1.CRRMAVGTIME ;
user_tmp.BUFBED = row1.BUFBED ;
user_tmp.BUFTIME = row1.BUFTIME ;
user = user_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "user"
if(user != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"user");
					}
					

								   				
	    				if(user.DD != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								user.DD
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_0_tFileOutputExcel_1);
							int currentWith_0_tFileOutputExcel_1 = cell_0_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>currentWith_0_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[0]:currentWith_0_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(user.CNT != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								user.CNT
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_1_tFileOutputExcel_1);
							int currentWith_1_tFileOutputExcel_1 = cell_1_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>currentWith_1_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[1]:currentWith_1_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(user.INCNT != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								user.INCNT
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_2_tFileOutputExcel_1);
							int currentWith_2_tFileOutputExcel_1 = cell_2_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>currentWith_2_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[2]:currentWith_2_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(user.CRINCNT != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								user.CRINCNT
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_3_tFileOutputExcel_1);
							int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>currentWith_3_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[3]:currentWith_3_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(user.CRINAVGTIME != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								user.CRINAVGTIME
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_4_tFileOutputExcel_1);
							int currentWith_4_tFileOutputExcel_1 = cell_4_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[4]=fitWidth_tFileOutputExcel_1[4]>currentWith_4_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[4]:currentWith_4_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(user.CRRMAVGTIME != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								user.CRRMAVGTIME
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_5_tFileOutputExcel_1);
							int currentWith_5_tFileOutputExcel_1 = cell_5_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[5]=fitWidth_tFileOutputExcel_1[5]>currentWith_5_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[5]:currentWith_5_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(user.BUFBED != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								user.BUFBED
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_6_tFileOutputExcel_1);
							int currentWith_6_tFileOutputExcel_1 = cell_6_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[6]=fitWidth_tFileOutputExcel_1[6]>currentWith_6_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[6]:currentWith_6_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(user.BUFTIME != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								user.BUFTIME
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_7_tFileOutputExcel_1);
							int currentWith_7_tFileOutputExcel_1 = cell_7_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[7]=fitWidth_tFileOutputExcel_1[7]>currentWith_7_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[7]:currentWith_7_tFileOutputExcel_1+2;
	    				} 
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "user"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}

globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

							columnIndex_tFileOutputExcel_1 = 0;
						
	//modif start
		
			writableSheet_tFileOutputExcel_1.setColumnView(columnIndex_tFileOutputExcel_1, fitWidth_tFileOutputExcel_1[0]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_1 = 1;
						
	//modif start
		
			writableSheet_tFileOutputExcel_1.setColumnView(columnIndex_tFileOutputExcel_1, fitWidth_tFileOutputExcel_1[1]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_1 = 2;
						
	//modif start
		
			writableSheet_tFileOutputExcel_1.setColumnView(columnIndex_tFileOutputExcel_1, fitWidth_tFileOutputExcel_1[2]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_1 = 3;
						
	//modif start
		
			writableSheet_tFileOutputExcel_1.setColumnView(columnIndex_tFileOutputExcel_1, fitWidth_tFileOutputExcel_1[3]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_1 = 4;
						
	//modif start
		
			writableSheet_tFileOutputExcel_1.setColumnView(columnIndex_tFileOutputExcel_1, fitWidth_tFileOutputExcel_1[4]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_1 = 5;
						
	//modif start
		
			writableSheet_tFileOutputExcel_1.setColumnView(columnIndex_tFileOutputExcel_1, fitWidth_tFileOutputExcel_1[5]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_1 = 6;
						
	//modif start
		
			writableSheet_tFileOutputExcel_1.setColumnView(columnIndex_tFileOutputExcel_1, fitWidth_tFileOutputExcel_1[6]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_1 = 7;
						
	//modif start
		
			writableSheet_tFileOutputExcel_1.setColumnView(columnIndex_tFileOutputExcel_1, fitWidth_tFileOutputExcel_1[7]);
		
	//modif end
	
		writeableWorkbook_tFileOutputExcel_1.write();
		writeableWorkbook_tFileOutputExcel_1.close();
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"user");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_2Process(globalMap);



/**
 * [tFileOutputExcel_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfuserStruct implements routines.system.IPersistableRow<copyOfuserStruct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String RMGBN;

				public String getRMGBN () {
					return this.RMGBN;
				}
				
			    public String ROOM;

				public String getROOM () {
					return this.ROOM;
				}
				
			    public String DD;

				public String getDD () {
					return this.DD;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.RMGBN = readString(dis);
					
					this.ROOM = readString(dis);
					
					this.DD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.RMGBN,dos);
					
					// String
				
						writeString(this.ROOM,dos);
					
					// String
				
						writeString(this.DD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RMGBN="+RMGBN);
		sb.append(",ROOM="+ROOM);
		sb.append(",DD="+DD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfuserStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String RMGBN;

				public String getRMGBN () {
					return this.RMGBN;
				}
				
			    public String ROOM;

				public String getROOM () {
					return this.ROOM;
				}
				
			    public String DD;

				public String getDD () {
					return this.DD;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.RMGBN = readString(dis);
					
					this.ROOM = readString(dis);
					
					this.DD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.RMGBN,dos);
					
					// String
				
						writeString(this.ROOM,dos);
					
					// String
				
						writeString(this.DD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RMGBN="+RMGBN);
		sb.append(",ROOM="+ROOM);
		sb.append(",DD="+DD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
copyOfuserStruct copyOfuser = new copyOfuserStruct();





	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfuser");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		int nb_line_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="D:/data/EmergencyKPI/응급실KPI_"+TalendDate.formatDate("yyyyMMdd", new Date()) + ".xls";
		java.io.File file_tFileOutputExcel_2 = new java.io.File(fileName_tFileOutputExcel_2);
		boolean isFileGenerated_tFileOutputExcel_2 = true;
		if(file_tFileOutputExcel_2.exists()){
			isFileGenerated_tFileOutputExcel_2 = false;
		}
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2.getParentFile();
          if (parentFile_tFileOutputExcel_2 != null && !parentFile_tFileOutputExcel_2.exists()) {
        	
             parentFile_tFileOutputExcel_2.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_2.setEncoding("UTF-8");  
        if (file_tFileOutputExcel_2.exists()) {
        jxl.Workbook workbook_tFileOutputExcel_2 = jxl.Workbook.getWorkbook(file_tFileOutputExcel_2,workbookSettings_tFileOutputExcel_2);
        workbookSettings_tFileOutputExcel_2.setWriteAccess(null);
        writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
                	new java.io.BufferedOutputStream(new java.io.FileOutputStream(file_tFileOutputExcel_2, false)), 
                	workbook_tFileOutputExcel_2, 
                	true,
                    workbookSettings_tFileOutputExcel_2);
        }else{        
		writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_2)), 
            		true, 
            		workbookSettings_tFileOutputExcel_2);        
        }     

        writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.getSheet("Sheet2");
        if(writableSheet_tFileOutputExcel_2 == null){
        	writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.createSheet("Sheet2", writeableWorkbook_tFileOutputExcel_2.getNumberOfSheets());
		}


        //modif start
        int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_2 = new int[3];
		for(int i_tFileOutputExcel_2=0;i_tFileOutputExcel_2<3;i_tFileOutputExcel_2++){
		    int fitCellViewSize_tFileOutputExcel_2=writableSheet_tFileOutputExcel_2.getColumnView(i_tFileOutputExcel_2).getSize();
			fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2]=fitCellViewSize_tFileOutputExcel_2/256;
			if(fitCellViewSize_tFileOutputExcel_2%256!=0){
				fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2]+=1;
			}
		}
		
		jxl.write.WritableFont wf_tFileOutputExcel_2 = new jxl.write.WritableFont(jxl.write.WritableFont.COURIER, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_tFileOutputExcel_2  = new jxl.write.WritableCellFormat(wf_tFileOutputExcel_2); 
		


		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfuserStruct copyOfuser_tmp = new copyOfuserStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	


	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_2 = false;
				boolean isConnectionWrapped_tDBInput_2 = !(conn_tDBInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_2 = null;
                if (isConnectionWrapped_tDBInput_2) {
					unwrappedOraConn_tDBInput_2 = conn_tDBInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_2 != null) {
                        isTimeZoneNull_tDBInput_2 = (unwrappedOraConn_tDBInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_2 = (((oracle.jdbc.OracleConnection)conn_tDBInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_2) {
					java.sql.Statement stmtGetTZ_tDBInput_2 = conn_tDBInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_2 = stmtGetTZ_tDBInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_2.next()) {
						sessionTimezone_tDBInput_2 = rsGetTZ_tDBInput_2.getString(1);
					}
					if (isConnectionWrapped_tDBInput_2 && unwrappedOraConn_tDBInput_2 != null) {
                        unwrappedOraConn_tDBInput_2.setSessionTimeZone(sessionTimezone_tDBInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_2).setSessionTimeZone(sessionTimezone_tDBInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "WITH EMER AS (\nSELECT TMP1.OUTRMDD\n       ,ERCE.BEDPOSCNTS\n       ,TMP1.OUTRMCD --31:병실로 입원, 32:중환자실로 바로 입원, 34:수술(시"
+"술)실로 간 후 중환자실로 입원\n     --,(select typenm from emr.mnembtms where cdcls = 'BT' and  instcd =  '014' and orddeptcd = 'ALL"
+"' and basetypecd = tmp1.outrmcd) as outrmcdnmdetl --퇴실형태\n       ,CASE WHEN EMR.FN_MN_GETERSDLTDIAG ( INPT.INSTCD, INPT."
+"PID, INPT.INDD, INPT.CRETNO, 'D', 'S', 'N') IS NOT NULL THEN 'Y'\n             ELSE NULL END AS SDDIAGYN -- 중증상병\n      "
+" ,CASE WHEN INPT.INPATH = '1' AND TMP1.OUTRMCD LIKE '3%'\n             THEN '외래경유 입원'\n             WHEN INPT.INPATH = '"
+"1'\n             THEN '외래경유 내원'\n             WHEN TMP1.OUTRMCD = '14'\n             THEN 'DAMA'\n             WHEN TMP1"
+".OUTRMCD = '13'\n             THEN 'Hopeless Discharge'\n             WHEN TMP1.OUTRMCD = '19'\n             THEN '외래처치대"
+"행'\n             WHEN TMP1.OUTRMCD LIKE '1%'\n             THEN '귀가'\n             WHEN TMP1.OUTRMCD LIKE '2%'\n        "
+"     THEN '전원'\n             WHEN TMP1.OUTRMCD IN ('33', '34')\n             THEN '수술'\n             WHEN TMP1.OUTRMCD L"
+"IKE '3%'\n             THEN '입원'\n             WHEN TMP1.OUTRMCD = '41'\n             THEN 'DOA'\n             WHEN TMP1"
+".OUTRMCD LIKE '4%'\n             THEN '사망'\n             WHEN TMP1.OUTRMCD LIKE '8%'\n             THEN '탈원'\n          "
+"   WHEN TMP1.OUTRMCD LIKE '9%'\n             THEN '기타'\n             WHEN TMP1.OUTRMCD IS NULL OR TMP1.OUTRMCD = ''\n   "
+"          THEN '응급실재원'\n             END AS OUTRMCDNM  --퇴실구분 : \n       ,(CASE WHEN (TMP1.OUTRMDD IS NULL OR TMP1.OUTRM"
+"DD = '-')\n                    AND (TMP1.CHOSDD IS NULL OR TMP1.CHOSDD = '-')\n              THEN NULL\n              EL"
+"SE ROUND (( TO_DATE(SUBSTR(TMP1.OUTRMDD || TMP1.OUTRMTM,1,12) , 'yyyymmddhh24mi')\n                         - TO_DATE( S"
+"UBSTR(TMP1.CHOSDD || TMP1.CHOSTM,1,12), 'yyyymmddhh24mi' )) * 24 * 60 )\n              END) AS OUTMODIN         -- 퇴실 - "
+"입실\n       ,(SELECT CHNGROOMCD \n           FROM PAM.PMIHCDCR\n          WHERE INSTCD = INPT.INSTCD\n            AND PID"
+" = INPT.PID\n            AND INDD = INPT.INDD\n            AND CRETNO = INPT.CRETNO\n            AND MSKIND = 'M'\n     "
+"       AND HISTSTAT = 'Y'\n            AND ACPTFLAGCD = '3'\n            AND APPFLAGCD IN ('1','3')\n            AND PRE"
+"STWARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD = INPT.INSTCD AND CDGRUPID = '002' AND TMP1.OUTRMDD BETWEEN VALI"
+"FROMDD AND VALITODD)\n            AND SEQNO = (SELECT MIN(SEQNO) \n                           FROM PAM.PMIHCDCR\n       "
+"                   WHERE INSTCD = INPT.INSTCD\n                            AND PID = INPT.PID\n                         "
+"   AND INDD = INPT.INDD\n                            AND CRETNO = INPT.CRETNO\n                            AND MSKIND = "
+"'M'\n                            AND HISTSTAT = 'Y'\n                            AND ACPTFLAGCD = '3'\n                 "
+"           AND APPFLAGCD IN ('1','3')\n                            AND PRESTWARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHE"
+"RE INSTCD = INPT.INSTCD AND CDGRUPID = '002' AND TMP1.OUTRMDD BETWEEN VALIFROMDD AND VALITODD)\n                        "
+"   )) AS OUTROOMCD --퇴실시 배정병동.\n  FROM (\n       SELECT\n           PID\n          ,INDD\n          ,INSTCD\n          ,"
+"CRETNO\n          ,VISITNO\n          ,CHOSDD\n          ,CHOSTM\n          ,OUTRMDD\n          ,OUTRMTM\n          ,OUT"
+"RMCD\n          ,OUTDECIDT\n          ,LASTPATZONE   --최종진료구역 추가 2017.08.24 jkj\n          ,MAX(DECODE(MAINYN , 'M', DEP"
+"TENGABBR, NULL))  MAINDEPT\n          ,MAX(DECODE(MAINYN , 'M', CALLDT, NULL))  MAINCALLDT\n          ,MAX(DECODE(MAINYN"
+" , 'M', ARRIVDT, NULL))  MAINARRIVDT\n          ,MAX(DECODE(MAINYN , 'M', ERORDDOCTCD, NULL))  MAINDOCTCD\n          ,MA"
+"X(CASE WHEN MAINYN = 'S' AND MRNUM = 1 THEN  DEPTENGABBR ELSE NULL END) DEPT1\n          ,MAX(CASE WHEN MAINYN = 'S' AND"
+" MRNUM = 1 THEN  CALLDT ELSE NULL END)  CALLDT1\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 1 THEN  ARRIVDT ELSE "
+"NULL END)  ARRIVDT1\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  DEPTENGABBR ELSE NULL END) DEPT2\n       "
+"   ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  CALLDT ELSE NULL END)  CALLDT2\n          ,MAX(CASE WHEN MAINYN = 'S'"
+" AND MRNUM = 2 THEN  ARRIVDT ELSE NULL END)  ARRIVDT2\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  DEPTENG"
+"ABBR ELSE NULL END) DEPT3\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  CALLDT ELSE NULL END)  CALLDT3\n   "
+"       ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  ARRIVDT ELSE NULL END)  ARRIVDT3\n          ,MAX(CASE WHEN MAINYN"
+" = 'S' AND MRNUM = 4 THEN  DEPTENGABBR ELSE NULL END) DEPT4\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 4 THEN  C"
+"ALLDT ELSE NULL END)  CALLDT4\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 4 THEN  ARRIVDT ELSE NULL END)  ARRIVDT"
+"4\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THEN  DEPTENGABBR ELSE NULL END) DEPT5\n          ,MAX(CASE WHEN "
+"MAINYN = 'S' AND MRNUM = 5 THEN  CALLDT ELSE NULL END)  CALLDT5\n          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THE"
+"N  ARRIVDT ELSE NULL END)  ARRIVDT5\n      FROM (\n            SELECT\n                   ERVD.PID\n                  ,E"
+"RVD.INDD\n                  ,ERVD.INSTCD\n                  ,ERVD.CRETNO\n                  ,ERVD.VISITNO\n             "
+"     ,ERVD.CHOSDD\n                  ,ERVD.CHOSTM\n                  ,ERVD.OUTRMDD\n                  ,ERVD.OUTRMTM\n   "
+"               ,ERVD.OUTRMCD\n                  ,ERVD.OUTDECIDT\n                  ,ERVD.LASTPATZONE   --최종진료구역 추가 2017."
+"08.24 jkj\n                  ,ERCD.CALLDT\n                  ,ERCD.ARRIVDT\n                  ,ERCD.MAINYN\n            "
+"      ,ERCD.ERORDDEPTCD\n                  ,ERCD.ERORDDOCTCD\n                  ,DEPT.DEPTENGABBR\n                  ,RO"
+"W_NUMBER () OVER (PARTITION BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN ORDER BY ERVD.INDD, ERVD.PID"
+",  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN, ERCD.CALLDT) MRNUM\n                  ,ROW_NUMBER () OVER (PARTITION BY ERVD."
+"INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO ORDER BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN, ERCD.C"
+"ALLDT) RNUM\n              FROM EMR.MNEHERVD ERVD\n                  ,EMR.MNEHERCD ERCD\n                  ,COM.ZSDDDEPT"
+" DEPT\n             WHERE ERVD.INSTCD =  '014'\n               AND ERVD.OUTRMDD BETWEEN  TO_CHAR(SYSDATE -1, 'YYYYMMDD')"
+" AND TO_CHAR(SYSDATE -1, 'YYYYMMDD')\n               AND ERVD.OUTRMDD IS NOT NULL\n               AND ERVD.INCNCLDT = '-"
+"'\n               AND ERVD.PID = ERCD.PID(+)\n               AND ERVD.INDD = ERCD.INDD(+)\n               AND ERVD.CRETN"
+"O = ERCD.CRETNO(+)\n               AND ERVD.VISITNO = ERCD.VISITNO(+)\n               AND ERVD.INSTCD = ERCD.INSTCD(+)\n"
+"               AND ERCD.HISTCD(+) = 'O'\n               AND ERCD.CALLDT(+) !='--------------'\n               AND ERCD.E"
+"RORDDEPTCD = DEPT.DEPTCD(+)\n               AND DEPT.INSTCD(+) =  '014'\n               AND DEPT.VALIFROMDD(+) <= TO_CHA"
+"R(SYSDATE, 'YYYYMMDD')\n               AND DEPT.VALITODD(+) >= TO_CHAR(SYSDATE, 'YYYYMMDD')\n            )\n        GROU"
+"P BY PID,INDD,INSTCD,CRETNO,VISITNO,CHOSDD,CHOSTM,OUTRMDD,OUTRMTM,OUTRMCD,OUTDECIDT,LASTPATZONE   --최종진료구역 추가 2017.08.24"
+" jkj\n  ) TMP1\n   ,PAM.PMIHINPT INPT\n   ,EMR.MNEHERCE ERCE\nWHERE TMP1.PID = INPT.PID\nAND TMP1.INDD = INPT.INDD\nAND "
+"TMP1.CRETNO = INPT.CRETNO\nAND TMP1.INSTCD = INPT.INSTCD\nAND INPT.MSKIND = 'M'\nAND INPT.HISTSTAT = 'Y'\nAND INPT.PID ="
+" ERCE.PID(+)\nAND INPT.INDD = ERCE.INDD(+)\nAND INPT.CRETNO = ERCE.CRETNO(+)\nAND INPT.INSTCD = ERCE.INSTCD(+)\nAND ERCE"
+".INCNCLDT(+) = '-'\nORDER BY OUTRMDD, OUTRMTM\n)\nSELECT '병실대상' rmgbn\n       ,'병실' room\n       ,TO_CHAR(SYSDATE-1, 'YY"
+"YY-MM-DD') dd \n  FROM DUAL\n--UNION ALL select '무증상버퍼' rmgbn, '432(4bed)' room, to_char(sum(case when OUTROOMCD = '432'"
+" then 1 else 0 end)) dd from EMER\n--UNION ALL select '' rmgbn, '736(4bed)' room, to_char(sum(case when OUTROOMCD = '736"
+"' then 1 else 0 end)) dd from EMER\n--UNION ALL select '무증상버퍼 sub ICU' rmgbn, '543(2bed)' room, to_char(sum(case when OU"
+"TROOMCD = '543' then 1 else 0 end)) dd from EMER\n--UNION ALL select '' rmgbn, '546(2bed)' room, to_char(sum(case when O"
+"UTROOMCD = '546' then 1 else 0 end)) dd from EMER\n--UNION ALL select '무증상버퍼 ICU' rmgbn, '3074(3bed)' room, to_char(sum("
+"case when OUTROOMCD = '3074' then 1 else 0 end)) dd from EMER\n--UNION ALL select '유증상버퍼' rmgbn, '532(1bed)' room, to_ch"
+"ar(sum(case when OUTROOMCD = '532' then 1 else 0 end)) dd from EMER\n--UNION ALL select '' rmgbn, '533(1bed)' room, to_c"
+"har(sum(case when OUTROOMCD = '533' then 1 else 0 end)) dd from EMER\n--UNION ALL select '' rmgbn, '534(2bed)' room, to_"
+"char(sum(case when OUTROOMCD = '534' then 1 else 0 end)) dd from EMER\n--UNION ALL select '' rmgbn, '535(2bed)' room, to"
+"_char(sum(case when OUTROOMCD = '535' then 1 else 0 end)) dd from EMER\n--UNION ALL select '' rmgbn, '535(2bed)' room, t"
+"o_char(sum(case when OUTROOMCD = '535' then 1 else 0 end)) dd from EMER\nUNION ALL select '버퍼' rmgbn, '607(1bed)' room, "
+"to_char(sum(case when OUTROOMCD = '607' then 1 else 0 end)) dd from EMER\nUNION ALL select '' rmgbn, '610(1bed)' room, t"
+"o_char(sum(case when OUTROOMCD = '610' then 1 else 0 end)) dd from EMER\nUNION ALL select '' rmgbn, '906(1bed)' room, to"
+"_char(sum(case when OUTROOMCD = '906' then 1 else 0 end)) dd from EMER\nUNION ALL select '' rmgbn, '907(1bed)' room, to_"
+"char(sum(case when OUTROOMCD = '907' then 1 else 0 end)) dd from EMER\nUNION ALL select '입원환자 통계' rmgbn, '입원환자수' room, t"
+"o_char(sum(case when OUTROOMCD is not null then 1 else 0 end)) dd from EMER\nUNION ALL select '입원환자 통계' rmgbn, '중증상병환자' "
+"room, to_char(sum(case when OUTROOMCD is not null and SDDIAGYN = 'Y' then 1 else 0 end)) dd from EMER\nUNION ALL select "
+"'입원환자 통계' rmgbn, '경증환자' room, to_char(sum(case when OUTROOMCD is not null and (SDDIAGYN != 'Y' OR SDDIAGYN is null) then"
+" 1 else 0 end)) dd from EMER\nUNION ALL select '입원환자 통계' rmgbn, '버퍼룸 입원 합계' room, to_char(sum(case when OUTROOMCD IN ('6"
+"07','610','906','907') then 1 else 0 end)) dd from EMER\n--UNION ALL select '입원환자 통계' rmgbn, '무증상버퍼' room, to_char(sum(c"
+"ase when OUTROOMCD IN ('432','736','543','546','3074') then 1 else 0 end)) dd from EMER\n--UNION ALL select '입원환자 통계' rm"
+"gbn, '유증상버퍼' room, to_char(sum(case when OUTROOMCD IN ('532','533','534','535') then 1 else 0 end)) dd from EMER";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.RMGBN = null;
							} else {
	                         		
        	row2.RMGBN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.ROOM = null;
							} else {
	                         		
        	row2.ROOM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.DD = null;
							} else {
	                         		
        	row2.DD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
					




 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfuser = null;


// # Output table : 'copyOfuser'
copyOfuser_tmp.RMGBN = row2.RMGBN ;
copyOfuser_tmp.ROOM = row2.ROOM ;
copyOfuser_tmp.DD = row2.DD ;
copyOfuser = copyOfuser_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfuser"
if(copyOfuser != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfuser");
					}
					

								   				
	    				if(copyOfuser.RMGBN != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								copyOfuser.RMGBN
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_0_tFileOutputExcel_2);
							int currentWith_0_tFileOutputExcel_2 = cell_0_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[0]=fitWidth_tFileOutputExcel_2[0]>currentWith_0_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[0]:currentWith_0_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(copyOfuser.ROOM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								copyOfuser.ROOM
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_1_tFileOutputExcel_2);
							int currentWith_1_tFileOutputExcel_2 = cell_1_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[1]=fitWidth_tFileOutputExcel_2[1]>currentWith_1_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[1]:currentWith_1_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(copyOfuser.DD != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								copyOfuser.DD
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_2_tFileOutputExcel_2);
							int currentWith_2_tFileOutputExcel_2 = cell_2_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[2]=fitWidth_tFileOutputExcel_2[2]>currentWith_2_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[2]:currentWith_2_tFileOutputExcel_2+2;
	    				} 
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "copyOfuser"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}

globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

							columnIndex_tFileOutputExcel_2 = 0;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[0]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 1;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[1]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 2;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[2]);
		
	//modif end
	
		writeableWorkbook_tFileOutputExcel_2.write();
		writeableWorkbook_tFileOutputExcel_2.close();
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfuser");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_3Process(globalMap);



/**
 * [tFileOutputExcel_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfuserStruct implements routines.system.IPersistableRow<copyOfcopyOfuserStruct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String CHOSDDTM;

				public String getCHOSDDTM () {
					return this.CHOSDDTM;
				}
				
			    public String OUTRMDDTM;

				public String getOUTRMDDTM () {
					return this.OUTRMDDTM;
				}
				
			    public String BEDPOSCNTS;

				public String getBEDPOSCNTS () {
					return this.BEDPOSCNTS;
				}
				
			    public String SDDIAGYN;

				public String getSDDIAGYN () {
					return this.SDDIAGYN;
				}
				
			    public String PID;

				public String getPID () {
					return this.PID;
				}
				
			    public String PATNM;

				public String getPATNM () {
					return this.PATNM;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String AGE;

				public String getAGE () {
					return this.AGE;
				}
				
			    public String MAINORDDEPT;

				public String getMAINORDDEPT () {
					return this.MAINORDDEPT;
				}
				
			    public String OUTROOMCD;

				public String getOUTROOMCD () {
					return this.OUTROOMCD;
				}
				
			    public String OUTMODIN;

				public String getOUTMODIN () {
					return this.OUTMODIN;
				}
				
			    public String CALLMODIN;

				public String getCALLMODIN () {
					return this.CALLMODIN;
				}
				
			    public String VISITMODCALL;

				public String getVISITMODCALL () {
					return this.VISITMODCALL;
				}
				
			    public String DSCHDCLRMODIN;

				public String getDSCHDCLRMODIN () {
					return this.DSCHDCLRMODIN;
				}
				
			    public String OUTMODDSCHDCLR;

				public String getOUTMODDSCHDCLR () {
					return this.OUTMODDSCHDCLR;
				}
				
			    public String PAMACPTMOOUT;

				public String getPAMACPTMOOUT () {
					return this.PAMACPTMOOUT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.CHOSDDTM = readString(dis);
					
					this.OUTRMDDTM = readString(dis);
					
					this.BEDPOSCNTS = readString(dis);
					
					this.SDDIAGYN = readString(dis);
					
					this.PID = readString(dis);
					
					this.PATNM = readString(dis);
					
					this.SEX = readString(dis);
					
					this.AGE = readString(dis);
					
					this.MAINORDDEPT = readString(dis);
					
					this.OUTROOMCD = readString(dis);
					
					this.OUTMODIN = readString(dis);
					
					this.CALLMODIN = readString(dis);
					
					this.VISITMODCALL = readString(dis);
					
					this.DSCHDCLRMODIN = readString(dis);
					
					this.OUTMODDSCHDCLR = readString(dis);
					
					this.PAMACPTMOOUT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CHOSDDTM,dos);
					
					// String
				
						writeString(this.OUTRMDDTM,dos);
					
					// String
				
						writeString(this.BEDPOSCNTS,dos);
					
					// String
				
						writeString(this.SDDIAGYN,dos);
					
					// String
				
						writeString(this.PID,dos);
					
					// String
				
						writeString(this.PATNM,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.AGE,dos);
					
					// String
				
						writeString(this.MAINORDDEPT,dos);
					
					// String
				
						writeString(this.OUTROOMCD,dos);
					
					// String
				
						writeString(this.OUTMODIN,dos);
					
					// String
				
						writeString(this.CALLMODIN,dos);
					
					// String
				
						writeString(this.VISITMODCALL,dos);
					
					// String
				
						writeString(this.DSCHDCLRMODIN,dos);
					
					// String
				
						writeString(this.OUTMODDSCHDCLR,dos);
					
					// String
				
						writeString(this.PAMACPTMOOUT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CHOSDDTM="+CHOSDDTM);
		sb.append(",OUTRMDDTM="+OUTRMDDTM);
		sb.append(",BEDPOSCNTS="+BEDPOSCNTS);
		sb.append(",SDDIAGYN="+SDDIAGYN);
		sb.append(",PID="+PID);
		sb.append(",PATNM="+PATNM);
		sb.append(",SEX="+SEX);
		sb.append(",AGE="+AGE);
		sb.append(",MAINORDDEPT="+MAINORDDEPT);
		sb.append(",OUTROOMCD="+OUTROOMCD);
		sb.append(",OUTMODIN="+OUTMODIN);
		sb.append(",CALLMODIN="+CALLMODIN);
		sb.append(",VISITMODCALL="+VISITMODCALL);
		sb.append(",DSCHDCLRMODIN="+DSCHDCLRMODIN);
		sb.append(",OUTMODDSCHDCLR="+OUTMODDSCHDCLR);
		sb.append(",PAMACPTMOOUT="+PAMACPTMOOUT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfuserStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String CHOSDDTM;

				public String getCHOSDDTM () {
					return this.CHOSDDTM;
				}
				
			    public String OUTRMDDTM;

				public String getOUTRMDDTM () {
					return this.OUTRMDDTM;
				}
				
			    public String BEDPOSCNTS;

				public String getBEDPOSCNTS () {
					return this.BEDPOSCNTS;
				}
				
			    public String SDDIAGYN;

				public String getSDDIAGYN () {
					return this.SDDIAGYN;
				}
				
			    public String PID;

				public String getPID () {
					return this.PID;
				}
				
			    public String PATNM;

				public String getPATNM () {
					return this.PATNM;
				}
				
			    public String SEX;

				public String getSEX () {
					return this.SEX;
				}
				
			    public String AGE;

				public String getAGE () {
					return this.AGE;
				}
				
			    public String MAINORDDEPT;

				public String getMAINORDDEPT () {
					return this.MAINORDDEPT;
				}
				
			    public String OUTROOMCD;

				public String getOUTROOMCD () {
					return this.OUTROOMCD;
				}
				
			    public String OUTMODIN;

				public String getOUTMODIN () {
					return this.OUTMODIN;
				}
				
			    public String CALLMODIN;

				public String getCALLMODIN () {
					return this.CALLMODIN;
				}
				
			    public String VISITMODCALL;

				public String getVISITMODCALL () {
					return this.VISITMODCALL;
				}
				
			    public String DSCHDCLRMODIN;

				public String getDSCHDCLRMODIN () {
					return this.DSCHDCLRMODIN;
				}
				
			    public String OUTMODDSCHDCLR;

				public String getOUTMODDSCHDCLR () {
					return this.OUTMODDSCHDCLR;
				}
				
			    public String PAMACPTMOOUT;

				public String getPAMACPTMOOUT () {
					return this.PAMACPTMOOUT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.CHOSDDTM = readString(dis);
					
					this.OUTRMDDTM = readString(dis);
					
					this.BEDPOSCNTS = readString(dis);
					
					this.SDDIAGYN = readString(dis);
					
					this.PID = readString(dis);
					
					this.PATNM = readString(dis);
					
					this.SEX = readString(dis);
					
					this.AGE = readString(dis);
					
					this.MAINORDDEPT = readString(dis);
					
					this.OUTROOMCD = readString(dis);
					
					this.OUTMODIN = readString(dis);
					
					this.CALLMODIN = readString(dis);
					
					this.VISITMODCALL = readString(dis);
					
					this.DSCHDCLRMODIN = readString(dis);
					
					this.OUTMODDSCHDCLR = readString(dis);
					
					this.PAMACPTMOOUT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CHOSDDTM,dos);
					
					// String
				
						writeString(this.OUTRMDDTM,dos);
					
					// String
				
						writeString(this.BEDPOSCNTS,dos);
					
					// String
				
						writeString(this.SDDIAGYN,dos);
					
					// String
				
						writeString(this.PID,dos);
					
					// String
				
						writeString(this.PATNM,dos);
					
					// String
				
						writeString(this.SEX,dos);
					
					// String
				
						writeString(this.AGE,dos);
					
					// String
				
						writeString(this.MAINORDDEPT,dos);
					
					// String
				
						writeString(this.OUTROOMCD,dos);
					
					// String
				
						writeString(this.OUTMODIN,dos);
					
					// String
				
						writeString(this.CALLMODIN,dos);
					
					// String
				
						writeString(this.VISITMODCALL,dos);
					
					// String
				
						writeString(this.DSCHDCLRMODIN,dos);
					
					// String
				
						writeString(this.OUTMODDSCHDCLR,dos);
					
					// String
				
						writeString(this.PAMACPTMOOUT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CHOSDDTM="+CHOSDDTM);
		sb.append(",OUTRMDDTM="+OUTRMDDTM);
		sb.append(",BEDPOSCNTS="+BEDPOSCNTS);
		sb.append(",SDDIAGYN="+SDDIAGYN);
		sb.append(",PID="+PID);
		sb.append(",PATNM="+PATNM);
		sb.append(",SEX="+SEX);
		sb.append(",AGE="+AGE);
		sb.append(",MAINORDDEPT="+MAINORDDEPT);
		sb.append(",OUTROOMCD="+OUTROOMCD);
		sb.append(",OUTMODIN="+OUTMODIN);
		sb.append(",CALLMODIN="+CALLMODIN);
		sb.append(",VISITMODCALL="+VISITMODCALL);
		sb.append(",DSCHDCLRMODIN="+DSCHDCLRMODIN);
		sb.append(",OUTMODDSCHDCLR="+OUTMODDSCHDCLR);
		sb.append(",PAMACPTMOOUT="+PAMACPTMOOUT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
copyOfcopyOfuserStruct copyOfcopyOfuser = new copyOfcopyOfuserStruct();





	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfuser");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		int columnIndex_tFileOutputExcel_3 = 0;
		
		int nb_line_tFileOutputExcel_3 = 0;
		
		String fileName_tFileOutputExcel_3="D:/data/EmergencyKPI/응급실KPI_"+TalendDate.formatDate("yyyyMMdd", new Date()) + ".xls";
		java.io.File file_tFileOutputExcel_3 = new java.io.File(fileName_tFileOutputExcel_3);
		boolean isFileGenerated_tFileOutputExcel_3 = true;
		if(file_tFileOutputExcel_3.exists()){
			isFileGenerated_tFileOutputExcel_3 = false;
		}
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_3 = file_tFileOutputExcel_3.getParentFile();
          if (parentFile_tFileOutputExcel_3 != null && !parentFile_tFileOutputExcel_3.exists()) {
        	
             parentFile_tFileOutputExcel_3.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_3 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_3 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_3 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_3.setEncoding("UTF-8");  
        if (file_tFileOutputExcel_3.exists()) {
        jxl.Workbook workbook_tFileOutputExcel_3 = jxl.Workbook.getWorkbook(file_tFileOutputExcel_3,workbookSettings_tFileOutputExcel_3);
        workbookSettings_tFileOutputExcel_3.setWriteAccess(null);
        writeableWorkbook_tFileOutputExcel_3 = new jxl.write.biff.WritableWorkbookImpl(
                	new java.io.BufferedOutputStream(new java.io.FileOutputStream(file_tFileOutputExcel_3, false)), 
                	workbook_tFileOutputExcel_3, 
                	true,
                    workbookSettings_tFileOutputExcel_3);
        }else{        
		writeableWorkbook_tFileOutputExcel_3 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_3)), 
            		true, 
            		workbookSettings_tFileOutputExcel_3);        
        }     

        writableSheet_tFileOutputExcel_3 = writeableWorkbook_tFileOutputExcel_3.getSheet("Sheet3");
        if(writableSheet_tFileOutputExcel_3 == null){
        	writableSheet_tFileOutputExcel_3 = writeableWorkbook_tFileOutputExcel_3.createSheet("Sheet3", writeableWorkbook_tFileOutputExcel_3.getNumberOfSheets());
		}


        //modif start
        int startRowNum_tFileOutputExcel_3 = writableSheet_tFileOutputExcel_3.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_3 = new int[16];
		for(int i_tFileOutputExcel_3=0;i_tFileOutputExcel_3<16;i_tFileOutputExcel_3++){
		    int fitCellViewSize_tFileOutputExcel_3=writableSheet_tFileOutputExcel_3.getColumnView(i_tFileOutputExcel_3).getSize();
			fitWidth_tFileOutputExcel_3[i_tFileOutputExcel_3]=fitCellViewSize_tFileOutputExcel_3/256;
			if(fitCellViewSize_tFileOutputExcel_3%256!=0){
				fitWidth_tFileOutputExcel_3[i_tFileOutputExcel_3]+=1;
			}
		}
		
		jxl.write.WritableFont wf_tFileOutputExcel_3 = new jxl.write.WritableFont(jxl.write.WritableFont.COURIER, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_tFileOutputExcel_3  = new jxl.write.WritableCellFormat(wf_tFileOutputExcel_3); 
		


		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfuserStruct copyOfcopyOfuser_tmp = new copyOfcopyOfuserStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	


	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_3 = false;
				boolean isConnectionWrapped_tDBInput_3 = !(conn_tDBInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_3 = null;
                if (isConnectionWrapped_tDBInput_3) {
					unwrappedOraConn_tDBInput_3 = conn_tDBInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_3 != null) {
                        isTimeZoneNull_tDBInput_3 = (unwrappedOraConn_tDBInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_3 = (((oracle.jdbc.OracleConnection)conn_tDBInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_3) {
					java.sql.Statement stmtGetTZ_tDBInput_3 = conn_tDBInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_3 = stmtGetTZ_tDBInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_3.next()) {
						sessionTimezone_tDBInput_3 = rsGetTZ_tDBInput_3.getString(1);
					}
					if (isConnectionWrapped_tDBInput_3 && unwrappedOraConn_tDBInput_3 != null) {
                        unwrappedOraConn_tDBInput_3.setSessionTimeZone(sessionTimezone_tDBInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_3).setSessionTimeZone(sessionTimezone_tDBInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "-- Bed, BEDPOSCNTS\n-- 중증상병해당, SDDIAGYN\n-- Unit No, PID\n-- Name, PATNM\n-- Sex, SEX\n-- Age, AGE\n-- 주진료과, MAINORDDEP"
+"T\n-- 병실, OUTROOMCD\n-- 구간값\n-- 내원-퇴실, OUTMODIN\n-- 내원-호출, CALLMODIN\n-- 호출-도착, VISITMODCALL\n-- 내원-결정, DSCHDCLRMODIN\n-"
+"- 결정-퇴실, OUTMODDSCHDCLR\n-- 배정-퇴실 PAMACPTMOOUT\n-- WHERE BEDPOSCNTS NOT LIKE '%♣%' AND SDDIAGYN = 'Y' AND OUTRMCDNM IN ("
+"'수술', '입원')\n\nWITH BASE AS (\nSELECT TMP1.PID\n       ,TMP1.CHOSDD\n       ,TMP1.CHOSTM\n       ,TMP1.OUTRMDD\n       ,"
+"TMP1.OUTRMTM\n       ,CASE WHEN INPT.INPATH = '1' AND TMP1.OUTRMCD LIKE '3%'\n             THEN '외래경유 입원'\n             "
+"WHEN INPT.INPATH = '1'\n             THEN '외래경유 내원'\n             WHEN TMP1.OUTRMCD = '14'\n             THEN 'DAMA'\n  "
+"           WHEN TMP1.OUTRMCD = '13'\n             THEN 'Hopeless Discharge'\n             WHEN TMP1.OUTRMCD = '19'\n    "
+"         THEN '외래처치대행'\n             WHEN TMP1.OUTRMCD LIKE '1%'\n             THEN '귀가'\n             WHEN TMP1.OUTRMCD"
+" LIKE '2%'\n             THEN '전원'\n             WHEN TMP1.OUTRMCD IN ('33', '34')\n             THEN '수술'\n            "
+" WHEN TMP1.OUTRMCD LIKE '3%'\n             THEN '입원'\n             WHEN TMP1.OUTRMCD = '41'\n             THEN 'DOA'\n  "
+"           WHEN TMP1.OUTRMCD LIKE '4%'\n             THEN '사망'\n             WHEN TMP1.OUTRMCD LIKE '8%'\n             T"
+"HEN '탈원'\n             WHEN TMP1.OUTRMCD LIKE '9%'\n             THEN '기타'\n             WHEN TMP1.OUTRMCD IS NULL OR TM"
+"P1.OUTRMCD = ''\n             THEN '응급실재원'\n        END AS OUTRMCDNM\n       ,ERCE.BEDPOSCNTS\n       ,CASE WHEN EMR.FN_"
+"MN_GETERSDLTDIAG ( INPT.INSTCD, INPT.PID, INPT.INDD, INPT.CRETNO, 'D', 'S', 'N') IS NOT NULL THEN 'Y'\n             ELSE"
+" NULL \n        END AS SDDIAGYN         -- 중증상병\n       ,DECODE(TMP1.VISITNO, 0, PTBS.HNGNM , PTBS.HNGNM || 'ⓡ')        "
+"           AS PATNM  -- 환자명\n       ,PTBS.SEX                                                                   AS SEX  "
+"   -- 성별\n       ,COM.FN_ZZ_GETAGE ('', '', TO_CHAR(SYSDATE, 'YYYYMMDD'), 'b', PTBS.BRTHDD)  AS AGE     -- 나이\n       ,("
+"SELECT DEPTENGABBR\n           FROM COM.ZSDDDEPT\n          WHERE INSTCD =  '014'\n            AND DEPTCD = INPT.ERORDDE"
+"PTCD\n            AND INPT.INDD BETWEEN VALIFROMDD AND VALITODD )                  AS MAINORDDEPT\n       ,(SELECT CHNGR"
+"OOMCD FROM PAM.PMIHCDCR\n          WHERE INSTCD = INPT.INSTCD\n            AND PID = INPT.PID\n            AND INDD = IN"
+"PT.INDD\n            AND CRETNO = INPT.CRETNO\n            AND MSKIND = 'M'\n            AND HISTSTAT = 'Y'\n           "
+" AND ACPTFLAGCD = '3'\n            AND APPFLAGCD IN ('1','3')\n            AND PRESTWARDCD IN (SELECT CDID FROM EMR.MNWM"
+"CODE WHERE INSTCD = INPT.INSTCD AND CDGRUPID = '002' AND TMP1.OUTRMDD BETWEEN VALIFROMDD AND VALITODD)\n            AND "
+"SEQNO = ( SELECT MIN(SEQNO) FROM PAM.PMIHCDCR\n             WHERE INSTCD = INPT.INSTCD\n               AND PID = INPT.PI"
+"D\n               AND INDD = INPT.INDD\n               AND CRETNO = INPT.CRETNO\n               AND MSKIND = 'M'\n      "
+"         AND HISTSTAT = 'Y'\n               AND ACPTFLAGCD = '3'\n               AND APPFLAGCD IN ('1','3')\n           "
+"    AND PRESTWARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD = INPT.INSTCD AND CDGRUPID = '002' AND TMP1.OUTRMDD B"
+"ETWEEN VALIFROMDD AND VALITODD)\n               )) AS OUTROOMCD --퇴실시 배정병동.\n       ,CASE WHEN (TMP1.OUTRMDD IS NULL OR "
+"TMP1.OUTRMDD = '-')\n               AND (TMP1.CHOSDD IS NULL OR TMP1.CHOSDD = '-')\n              THEN NULL\n           "
+"   ELSE ROUND (( TO_DATE(SUBSTR(TMP1.OUTRMDD || TMP1.OUTRMTM,1,12) , 'yyyymmddhh24mi')\n                         - TO_DA"
+"TE( SUBSTR(TMP1.CHOSDD || TMP1.CHOSTM,1,12), 'yyyymmddhh24mi' )) * 24 * 60 )\n        END AS OUTMODIN         -- 퇴실 - 입실"
+"\n       ,ROUND((TO_DATE(CASE WHEN TMP1.MAINCALLDT NOT LIKE '-%'\n                             AND TMP1.MAINCALLDT IS NO"
+"T NULL\n                            THEN SUBSTR(TMP1.MAINCALLDT,1,12) END, 'yyyymmddhh24mi')\n               - TO_DATE( "
+"SUBSTR(TMP1.CHOSDD || TMP1.CHOSTM,1,12) , 'yyyymmddhh24mi' )) * 24 * 60 ) AS CALLMODIN -- 호출 - 입실\n       ,ROUND((TO_DAT"
+"E(CASE WHEN TMP1.MAINARRIVDT NOT LIKE '-%'\n                             AND TMP1.MAINARRIVDT IS NOT NULL\n             "
+"               THEN SUBSTR(TMP1.MAINARRIVDT,1,12) END, 'yyyymmddhh24mi')\n               - TO_DATE(CASE WHEN TMP1.MAINCA"
+"LLDT NOT LIKE '-%'\n                               AND TMP1.MAINCALLDT IS NOT NULL\n                        --       AND"
+" tmp1.maincalldt != ''\n                              THEN SUBSTR(TMP1.MAINCALLDT,1,12) END, 'yyyymmddhh24mi' )) * 24 * "
+"60 ) AS VISITMODCALL -- 도착 - 호출\n       ,CASE WHEN (TMP1.OUTDECIDT IS NULL OR TMP1.OUTDECIDT = '-')\n              AND ("
+"TMP1.CHOSDD IS NULL OR TMP1.CHOSDD = '-')\n             THEN NULL\n             ELSE DECODE(TMP1.OUTDECIDT,'-',NULL,ROUN"
+"D (( TO_DATE(SUBSTR(TMP1.OUTDECIDT,1,12), 'yyyymmddhh24mi')\n                         - TO_DATE(SUBSTR(TMP1.CHOSDD || TM"
+"P1.CHOSTM,1,12), 'yyyymmddhh24mi' )) * 24 * 60 ))\n        END AS DSCHDCLRMODIN    -- 결정 - 입실\n       ,CASE WHEN (TMP1.O"
+"UTRMDD   IS NULL OR TMP1.OUTRMDD   = '-')\n               OR (TMP1.OUTDECIDT IS NULL OR TMP1.OUTDECIDT = '-')\n         "
+"    THEN NULL\n             ELSE ROUND (( TO_DATE(SUBSTR(TMP1.OUTRMDD || TMP1.OUTRMTM,1,12) , 'yyyymmddhh24mi')\n       "
+"                  - TO_DATE( SUBSTR(TMP1.OUTDECIDT,1,12), 'yyyymmddhh24mi' )) * 24 * 60 )\n        END AS OUTMODDSCHDCLR"
+"   -- 퇴실 - 결정\n       ,DECODE(\n               (SELECT CASE WHEN (TMP1.OUTRMCD LIKE '3%' OR TMP1.OUTRMCD IS NULL) THEN C"
+"DCR.PAMACPTDD || CDCR.PAMACPTTM ELSE '' END\n                  FROM PAM.PMIHCDCR CDCR\n                 WHERE CDCR.INSTC"
+"D = INPT.INSTCD\n                    AND CDCR.PID = INPT.PID\n                    AND CDCR.INDD = INPT.INDD\n           "
+"         AND CDCR.CRETNO = INPT.CRETNO\n                    AND CDCR.APPFLAGCD = '3'\n                    AND CDCR.PREST"
+"WARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD =  '014' AND CDGRUPID = '002' AND TO_CHAR(SYSDATE,'YYYYMMDD') BETW"
+"EEN VALIFROMDD AND VALITODD)\n                    AND CDCR.CHNGWARDCD NOT IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD"
+" =  '014' AND CDGRUPID = '002' AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN VALIFROMDD AND VALITODD)\n                    AND"
+" CDCR.HISTSTAT = 'Y'\n                    AND EXISTS(SELECT 1\n                                 FROM PAM.PMIHADRV ADRV\n"
+"                                WHERE ADRV.INRSRVSTAT ='R'\n                                  AND ADRV.ERREGLYN = 'E'\n "
+"                                 AND INPT.INSTCD = ADRV.INSTCD\n                                  AND INPT.PID = ADRV.PI"
+"D\n                                  AND INPT.INDD || INPT.INTM <= ADRV.INRSRVACPTDD || ADRV.INRSRVACPTTM\n             "
+"                     AND INPT.DSCHDD || INPT.DSCHTM >= ADRV.INRSRVACPTDD || ADRV.INRSRVACPTTM)\n                        "
+"          AND ROWNUM = 1	            --2018.06.26 조건추가\n                 ) -- 응급실병실 배정일시\n                 , NULL, NULL"
+"\n                 , '-', NULL  -- 없을경우 제외\n                 , ROUND((TO_DATE(SUBSTR(TMP1.OUTRMDD || TMP1.OUTRMTM,1,12) ,"
+" 'YYYYMMDDHH24MI')\n                          - TO_DATE((SELECT CASE WHEN (TMP1.OUTRMCD LIKE '3%' OR TMP1.OUTRMCD IS NUL"
+"L) THEN SUBSTR(CDCR.PAMACPTDD || CDCR.PAMACPTTM,1,12) ELSE '' END\n                                       FROM PAM.PMIHC"
+"DCR CDCR\n                                      WHERE CDCR.INSTCD = INPT.INSTCD\n                                       "
+" AND CDCR.PID = INPT.PID\n                                        AND CDCR.INDD = INPT.INDD\n                           "
+"             AND CDCR.CRETNO = INPT.CRETNO\n                                        AND CDCR.APPFLAGCD = '3'\n          "
+"                              AND CDCR.PRESTWARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD =  '014' AND CDGRUPID "
+"= '002' AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN VALIFROMDD AND VALITODD)\n                                        AND CD"
+"CR.CHNGWARDCD NOT IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD =  '014' AND CDGRUPID = '002' AND TO_CHAR(SYSDATE,'YYYY"
+"MMDD') BETWEEN VALIFROMDD AND VALITODD)\n                                        AND CDCR.HISTSTAT = 'Y'\n              "
+"                          AND EXISTS(SELECT 1\n                                                     FROM PAM.PMIHADRV AD"
+"RV\n                                                    WHERE ADRV.INRSRVSTAT ='R'\n                                    "
+"                  AND ADRV.ERREGLYN = 'E'\n                                                      AND INPT.INSTCD = ADRV."
+"INSTCD\n                                                      AND INPT.PID = ADRV.PID\n                                 "
+"                     AND INPT.INDD || INPT.INTM <= ADRV.INRSRVACPTDD || ADRV.INRSRVACPTTM\n                             "
+"                         AND INPT.DSCHDD || INPT.DSCHDD >= ADRV.INRSRVACPTDD || ADRV.INRSRVACPTTM)\n                    "
+"                                  AND ROWNUM = 1	            --2018.06.26 조건추가\n                                    ), '"
+"YYYYMMDDHH24MI' )) * 24 * 60 ) -- 퇴실일시와의 차이 계산\n        ) AS PAMACPTMOOUT --배정-퇴실\n  FROM (SELECT\n                PID\n"
+"               ,INDD\n               ,INSTCD\n               ,CRETNO\n               ,VISITNO\n               ,CHOSDD\n "
+"              ,CHOSTM\n               ,OUTRMDD\n               ,OUTRMTM\n               ,OUTRMCD\n               ,OUTDEC"
+"IDT\n               ,LASTPATZONE   --최종진료구역 추가 2017.08.24 jkj\n               ,MAX(DECODE(MAINYN , 'M', DEPTENGABBR, NUL"
+"L))  MAINDEPT\n               ,MAX(DECODE(MAINYN , 'M', CALLDT, NULL))  MAINCALLDT\n               ,MAX(DECODE(MAINYN , "
+"'M', ARRIVDT, NULL))  MAINARRIVDT\n               ,MAX(DECODE(MAINYN , 'M', ERORDDOCTCD, NULL))  MAINDOCTCD\n           "
+"    ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 1 THEN  DEPTENGABBR ELSE NULL END) DEPT1\n               ,MAX(CASE WHEN MAIN"
+"YN = 'S' AND MRNUM = 1 THEN  CALLDT ELSE NULL END)  CALLDT1\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 1 TH"
+"EN  ARRIVDT ELSE NULL END)  ARRIVDT1\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  DEPTENGABBR ELSE NU"
+"LL END) DEPT2\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  CALLDT ELSE NULL END)  CALLDT2\n          "
+"     ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  ARRIVDT ELSE NULL END)  ARRIVDT2\n               ,MAX(CASE WHEN MAI"
+"NYN = 'S' AND MRNUM = 3 THEN  DEPTENGABBR ELSE NULL END) DEPT3\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3"
+" THEN  CALLDT ELSE NULL END)  CALLDT3\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  ARRIVDT ELSE NULL "
+"END)  ARRIVDT3\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 4 THEN  DEPTENGABBR ELSE NULL END) DEPT4\n       "
+"        ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 4 THEN  CALLDT ELSE NULL END)  CALLDT4\n               ,MAX(CASE WHEN MA"
+"INYN = 'S' AND MRNUM = 4 THEN  ARRIVDT ELSE NULL END)  ARRIVDT4\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = "
+"5 THEN  DEPTENGABBR ELSE NULL END) DEPT5\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THEN  CALLDT ELSE NUL"
+"L END)  CALLDT5\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THEN  ARRIVDT ELSE NULL END)  ARRIVDT5\n      "
+"    FROM (\n                SELECT\n                        ERVD.PID\n                       ,ERVD.INDD\n               "
+"        ,ERVD.INSTCD\n                       ,ERVD.CRETNO\n                       ,ERVD.VISITNO\n                       "
+",ERVD.CHOSDD\n                       ,ERVD.CHOSTM\n                       ,ERVD.OUTRMDD\n                       ,ERVD.OU"
+"TRMTM\n                       ,ERVD.OUTRMCD\n                       ,ERVD.OUTDECIDT\n                       ,ERVD.LASTPA"
+"TZONE   --최종진료구역 추가 2017.08.24 jkj\n                       ,ERCD.CALLDT\n                       ,ERCD.ARRIVDT\n         "
+"              ,ERCD.MAINYN\n                       ,ERCD.ERORDDEPTCD\n                       ,ERCD.ERORDDOCTCD\n        "
+"               ,DEPT.DEPTENGABBR\n                       ,ROW_NUMBER () OVER (PARTITION BY ERVD.INDD, ERVD.PID,  ERVD.CR"
+"ETNO, ERVD.VISITNO, ERCD.MAINYN ORDER BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN, ERCD.CALLDT) MRNU"
+"M\n                       ,ROW_NUMBER () OVER (PARTITION BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO ORDER BY ERV"
+"D.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN, ERCD.CALLDT) RNUM\n                  FROM EMR.MNEHERVD ERVD\n"
+"                       ,EMR.MNEHERCD ERCD\n                       ,COM.ZSDDDEPT DEPT\n                  WHERE ERVD.INSTC"
+"D =  '014'\n                    AND ERVD.OUTRMDD = TO_CHAR(SYSDATE - 1, 'YYYYMMDD')\n                    AND ERVD.OUTRMD"
+"D IS NOT NULL\n                    AND ERVD.INCNCLDT = '-'\n                    AND ERVD.PID = ERCD.PID(+)\n            "
+"        AND ERVD.INDD = ERCD.INDD(+)\n                    AND ERVD.CRETNO = ERCD.CRETNO(+)\n                    AND ERVD"
+".VISITNO = ERCD.VISITNO(+)\n                    AND ERVD.INSTCD = ERCD.INSTCD(+)\n                    AND ERCD.HISTCD(+)"
+" = 'O'\n                    AND ERCD.CALLDT(+) !='--------------'\n                    AND ERCD.ERORDDEPTCD = DEPT.DEPTC"
+"D(+)\n                    AND DEPT.INSTCD(+) =  '014'\n                    AND DEPT.VALIFROMDD(+) <= TO_CHAR(SYSDATE, 'Y"
+"YYYMMDD')\n                    AND DEPT.VALITODD(+) >= TO_CHAR(SYSDATE, 'YYYYMMDD')\n                 )\n             GR"
+"OUP BY PID,INDD,INSTCD,CRETNO,VISITNO,CHOSDD,CHOSTM,OUTRMDD,OUTRMTM,OUTRMCD,OUTDECIDT,LASTPATZONE   --최종진료구역 추가 2017.08."
+"24 jkj\n       ) TMP1\n       ,PAM.PMIHINPT INPT\n       ,PAM.PMCMPTBS PTBS\n       ,EMR.MNEHERCE ERCE\n WHERE TMP1.PID "
+"= INPT.PID\n   AND TMP1.INDD = INPT.INDD\n   AND TMP1.CRETNO = INPT.CRETNO\n   AND TMP1.INSTCD = INPT.INSTCD\n   AND INP"
+"T.MSKIND = 'M'\n   AND INPT.HISTSTAT = 'Y'\n   AND TMP1.PID = PTBS.PID\n   AND TMP1.INSTCD = PTBS.INSTCD\n   AND INPT.PI"
+"D = ERCE.PID(+)\n   AND INPT.INDD = ERCE.INDD(+)\n   AND INPT.CRETNO = ERCE.CRETNO(+)\n   AND INPT.INSTCD = ERCE.INSTCD("
+"+)\n   AND ERCE.INCNCLDT(+) = '-'\n ORDER BY OUTRMDD, OUTRMTM\n)\nSELECT '내원일시' CHOSDDTM\n       ,'퇴실일시' OUTRMDDTM\n    "
+"   ,'Bed' BEDPOSCNTS\n       ,'중증상병해당' SDDIAGYN\n       ,'Unit No' PID\n       ,'Name' PATNM\n       ,'Sex' SEX\n       "
+",'Age' AGE\n       ,'주진료과' MAINORDDEPT\n       ,'병실' OUTROOMCD\n       ,'내원-퇴실' OUTMODIN\n       ,'내원-호출' CALLMODIN\n   "
+"    ,'호출-도착' VISITMODCALL\n       ,'내원-결정' DSCHDCLRMODIN\n       ,'결정-퇴실' OUTMODDSCHDCLR\n       ,'배정-퇴실' PAMACPTMOOUT\n"
+"  FROM DUAL\nUNION ALL\nSELECT TO_CHAR(TO_DATE(CHOSDD || CHOSTM, 'YYYYMMDDHH24MI'), 'YYYY-MM-DD HH24:MI') CHOSDDTM\n    "
+"   ,TO_CHAR(TO_DATE(OUTRMDD || OUTRMTM, 'YYYYMMDDHH24MI'), 'YYYY-MM-DD HH24:MI') OUTRMDDTM\n       ,BEDPOSCNTS\n       ,"
+"SDDIAGYN\n       ,PID\n       ,PATNM\n       ,SEX\n       ,AGE\n       ,MAINORDDEPT\n       ,OUTROOMCD\n       ,TO_CHAR("
+"OUTMODIN      ) OUTMODIN\n       ,TO_CHAR(CALLMODIN     ) CALLMODIN\n       ,TO_CHAR(VISITMODCALL  ) VISITMODCALL\n     "
+"  ,TO_CHAR(DSCHDCLRMODIN ) DSCHDCLRMODIN\n       ,TO_CHAR(OUTMODDSCHDCLR) OUTMODDSCHDCLR\n       ,TO_CHAR(PAMACPTMOOUT  "
+") PAMACPTMOOUT\n  FROM BASE\n WHERE BEDPOSCNTS NOT LIKE '%♣%' AND SDDIAGYN = 'Y' AND OUTRMCDNM IN ('수술', '입원')";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row4.CHOSDDTM = null;
							} else {
	                         		
        	row4.CHOSDDTM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row4.OUTRMDDTM = null;
							} else {
	                         		
        	row4.OUTRMDDTM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row4.BEDPOSCNTS = null;
							} else {
	                         		
        	row4.BEDPOSCNTS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row4.SDDIAGYN = null;
							} else {
	                         		
        	row4.SDDIAGYN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row4.PID = null;
							} else {
	                         		
        	row4.PID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row4.PATNM = null;
							} else {
	                         		
        	row4.PATNM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row4.SEX = null;
							} else {
	                         		
        	row4.SEX = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row4.AGE = null;
							} else {
	                         		
        	row4.AGE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row4.MAINORDDEPT = null;
							} else {
	                         		
        	row4.MAINORDDEPT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row4.OUTROOMCD = null;
							} else {
	                         		
        	row4.OUTROOMCD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row4.OUTMODIN = null;
							} else {
	                         		
        	row4.OUTMODIN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row4.CALLMODIN = null;
							} else {
	                         		
        	row4.CALLMODIN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row4.VISITMODCALL = null;
							} else {
	                         		
        	row4.VISITMODCALL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row4.DSCHDCLRMODIN = null;
							} else {
	                         		
        	row4.DSCHDCLRMODIN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row4.OUTMODDSCHDCLR = null;
							} else {
	                         		
        	row4.OUTMODDSCHDCLR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row4.PAMACPTMOOUT = null;
							} else {
	                         		
        	row4.PAMACPTMOOUT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
		                    }
					




 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfuser = null;


// # Output table : 'copyOfcopyOfuser'
copyOfcopyOfuser_tmp.CHOSDDTM = row4.CHOSDDTM ;
copyOfcopyOfuser_tmp.OUTRMDDTM = row4.OUTRMDDTM ;
copyOfcopyOfuser_tmp.BEDPOSCNTS = row4.BEDPOSCNTS ;
copyOfcopyOfuser_tmp.SDDIAGYN = row4.SDDIAGYN ;
copyOfcopyOfuser_tmp.PID = row4.PID ;
copyOfcopyOfuser_tmp.PATNM = row4.PATNM ;
copyOfcopyOfuser_tmp.SEX = row4.SEX ;
copyOfcopyOfuser_tmp.AGE = row4.AGE ;
copyOfcopyOfuser_tmp.MAINORDDEPT = row4.MAINORDDEPT ;
copyOfcopyOfuser_tmp.OUTROOMCD = row4.OUTROOMCD ;
copyOfcopyOfuser_tmp.OUTMODIN = row4.OUTMODIN ;
copyOfcopyOfuser_tmp.CALLMODIN = row4.CALLMODIN ;
copyOfcopyOfuser_tmp.VISITMODCALL = row4.VISITMODCALL ;
copyOfcopyOfuser_tmp.DSCHDCLRMODIN = row4.DSCHDCLRMODIN ;
copyOfcopyOfuser_tmp.OUTMODDSCHDCLR = row4.OUTMODDSCHDCLR ;
copyOfcopyOfuser_tmp.PAMACPTMOOUT = row4.PAMACPTMOOUT ;
copyOfcopyOfuser = copyOfcopyOfuser_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfuser"
if(copyOfcopyOfuser != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfuser");
					}
					

								   				
	    				if(copyOfcopyOfuser.CHOSDDTM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.CHOSDDTM
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_0_tFileOutputExcel_3);
							int currentWith_0_tFileOutputExcel_3 = cell_0_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[0]=fitWidth_tFileOutputExcel_3[0]>currentWith_0_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[0]:currentWith_0_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.OUTRMDDTM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.OUTRMDDTM
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_1_tFileOutputExcel_3);
							int currentWith_1_tFileOutputExcel_3 = cell_1_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[1]=fitWidth_tFileOutputExcel_3[1]>currentWith_1_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[1]:currentWith_1_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.BEDPOSCNTS != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.BEDPOSCNTS
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_2_tFileOutputExcel_3);
							int currentWith_2_tFileOutputExcel_3 = cell_2_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[2]=fitWidth_tFileOutputExcel_3[2]>currentWith_2_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[2]:currentWith_2_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.SDDIAGYN != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.SDDIAGYN
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_3_tFileOutputExcel_3);
							int currentWith_3_tFileOutputExcel_3 = cell_3_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[3]=fitWidth_tFileOutputExcel_3[3]>currentWith_3_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[3]:currentWith_3_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.PID != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.PID
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_4_tFileOutputExcel_3);
							int currentWith_4_tFileOutputExcel_3 = cell_4_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[4]=fitWidth_tFileOutputExcel_3[4]>currentWith_4_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[4]:currentWith_4_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.PATNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.PATNM
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_5_tFileOutputExcel_3);
							int currentWith_5_tFileOutputExcel_3 = cell_5_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[5]=fitWidth_tFileOutputExcel_3[5]>currentWith_5_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[5]:currentWith_5_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.SEX != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.SEX
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_6_tFileOutputExcel_3);
							int currentWith_6_tFileOutputExcel_3 = cell_6_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[6]=fitWidth_tFileOutputExcel_3[6]>currentWith_6_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[6]:currentWith_6_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.AGE != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.AGE
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_7_tFileOutputExcel_3);
							int currentWith_7_tFileOutputExcel_3 = cell_7_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[7]=fitWidth_tFileOutputExcel_3[7]>currentWith_7_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[7]:currentWith_7_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.MAINORDDEPT != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 8;
					

					
						jxl.write.WritableCell cell_8_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.MAINORDDEPT
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_8_tFileOutputExcel_3);
							int currentWith_8_tFileOutputExcel_3 = cell_8_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[8]=fitWidth_tFileOutputExcel_3[8]>currentWith_8_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[8]:currentWith_8_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.OUTROOMCD != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 9;
					

					
						jxl.write.WritableCell cell_9_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.OUTROOMCD
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_9_tFileOutputExcel_3);
							int currentWith_9_tFileOutputExcel_3 = cell_9_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[9]=fitWidth_tFileOutputExcel_3[9]>currentWith_9_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[9]:currentWith_9_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.OUTMODIN != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 10;
					

					
						jxl.write.WritableCell cell_10_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.OUTMODIN
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_10_tFileOutputExcel_3);
							int currentWith_10_tFileOutputExcel_3 = cell_10_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[10]=fitWidth_tFileOutputExcel_3[10]>currentWith_10_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[10]:currentWith_10_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.CALLMODIN != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 11;
					

					
						jxl.write.WritableCell cell_11_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.CALLMODIN
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_11_tFileOutputExcel_3);
							int currentWith_11_tFileOutputExcel_3 = cell_11_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[11]=fitWidth_tFileOutputExcel_3[11]>currentWith_11_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[11]:currentWith_11_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.VISITMODCALL != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 12;
					

					
						jxl.write.WritableCell cell_12_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.VISITMODCALL
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_12_tFileOutputExcel_3);
							int currentWith_12_tFileOutputExcel_3 = cell_12_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[12]=fitWidth_tFileOutputExcel_3[12]>currentWith_12_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[12]:currentWith_12_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.DSCHDCLRMODIN != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 13;
					

					
						jxl.write.WritableCell cell_13_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.DSCHDCLRMODIN
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_13_tFileOutputExcel_3);
							int currentWith_13_tFileOutputExcel_3 = cell_13_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[13]=fitWidth_tFileOutputExcel_3[13]>currentWith_13_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[13]:currentWith_13_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.OUTMODDSCHDCLR != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 14;
					

					
						jxl.write.WritableCell cell_14_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.OUTMODDSCHDCLR
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_14_tFileOutputExcel_3);
							int currentWith_14_tFileOutputExcel_3 = cell_14_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[14]=fitWidth_tFileOutputExcel_3[14]>currentWith_14_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[14]:currentWith_14_tFileOutputExcel_3+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfuser.PAMACPTMOOUT != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_3 = 15;
					

					
						jxl.write.WritableCell cell_15_tFileOutputExcel_3 = new jxl.write.Label(columnIndex_tFileOutputExcel_3, startRowNum_tFileOutputExcel_3 + nb_line_tFileOutputExcel_3,
					
//modif end
								copyOfcopyOfuser.PAMACPTMOOUT
						,format_tFileOutputExcel_3
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_3.addCell(cell_15_tFileOutputExcel_3);
							int currentWith_15_tFileOutputExcel_3 = cell_15_tFileOutputExcel_3.getContents().trim().length();
							fitWidth_tFileOutputExcel_3[15]=fitWidth_tFileOutputExcel_3[15]>currentWith_15_tFileOutputExcel_3?fitWidth_tFileOutputExcel_3[15]:currentWith_15_tFileOutputExcel_3+2;
	    				} 
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfuser"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}

globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

							columnIndex_tFileOutputExcel_3 = 0;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[0]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 1;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[1]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 2;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[2]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 3;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[3]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 4;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[4]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 5;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[5]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 6;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[6]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 7;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[7]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 8;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[8]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 9;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[9]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 10;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[10]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 11;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[11]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 12;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[12]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 13;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[13]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 14;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[14]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_3 = 15;
						
	//modif start
		
			writableSheet_tFileOutputExcel_3.setColumnView(columnIndex_tFileOutputExcel_3, fitWidth_tFileOutputExcel_3[15]);
		
	//modif end
	
		writeableWorkbook_tFileOutputExcel_3.write();
		writeableWorkbook_tFileOutputExcel_3.close();
		
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfuser");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_4Process(globalMap);



/**
 * [tFileOutputExcel_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfcopyOfuserStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfuserStruct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String PID;

				public String getPID () {
					return this.PID;
				}
				
			    public String PATNM;

				public String getPATNM () {
					return this.PATNM;
				}
				
			    public String MAINORDDEPT;

				public String getMAINORDDEPT () {
					return this.MAINORDDEPT;
				}
				
			    public String DEPTHNGNM;

				public String getDEPTHNGNM () {
					return this.DEPTHNGNM;
				}
				
			    public String INDIRECDRID;

				public String getINDIRECDRID () {
					return this.INDIRECDRID;
				}
				
			    public String USERNM;

				public String getUSERNM () {
					return this.USERNM;
				}
				
			    public String POSDEPTHNGNM;

				public String getPOSDEPTHNGNM () {
					return this.POSDEPTHNGNM;
				}
				
			    public String JOBNM;

				public String getJOBNM () {
					return this.JOBNM;
				}
				
			    public String LOGINDEPTNM;

				public String getLOGINDEPTNM () {
					return this.LOGINDEPTNM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.PID = readString(dis);
					
					this.PATNM = readString(dis);
					
					this.MAINORDDEPT = readString(dis);
					
					this.DEPTHNGNM = readString(dis);
					
					this.INDIRECDRID = readString(dis);
					
					this.USERNM = readString(dis);
					
					this.POSDEPTHNGNM = readString(dis);
					
					this.JOBNM = readString(dis);
					
					this.LOGINDEPTNM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PID,dos);
					
					// String
				
						writeString(this.PATNM,dos);
					
					// String
				
						writeString(this.MAINORDDEPT,dos);
					
					// String
				
						writeString(this.DEPTHNGNM,dos);
					
					// String
				
						writeString(this.INDIRECDRID,dos);
					
					// String
				
						writeString(this.USERNM,dos);
					
					// String
				
						writeString(this.POSDEPTHNGNM,dos);
					
					// String
				
						writeString(this.JOBNM,dos);
					
					// String
				
						writeString(this.LOGINDEPTNM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PID="+PID);
		sb.append(",PATNM="+PATNM);
		sb.append(",MAINORDDEPT="+MAINORDDEPT);
		sb.append(",DEPTHNGNM="+DEPTHNGNM);
		sb.append(",INDIRECDRID="+INDIRECDRID);
		sb.append(",USERNM="+USERNM);
		sb.append(",POSDEPTHNGNM="+POSDEPTHNGNM);
		sb.append(",JOBNM="+JOBNM);
		sb.append(",LOGINDEPTNM="+LOGINDEPTNM);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfuserStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_BUCHEON_Emergency = new byte[0];
    static byte[] commonByteArray_BUCHEON_Emergency = new byte[0];

	
			    public String PID;

				public String getPID () {
					return this.PID;
				}
				
			    public String PATNM;

				public String getPATNM () {
					return this.PATNM;
				}
				
			    public String MAINORDDEPT;

				public String getMAINORDDEPT () {
					return this.MAINORDDEPT;
				}
				
			    public String DEPTHNGNM;

				public String getDEPTHNGNM () {
					return this.DEPTHNGNM;
				}
				
			    public String INDIRECDRID;

				public String getINDIRECDRID () {
					return this.INDIRECDRID;
				}
				
			    public String USERNM;

				public String getUSERNM () {
					return this.USERNM;
				}
				
			    public String POSDEPTHNGNM;

				public String getPOSDEPTHNGNM () {
					return this.POSDEPTHNGNM;
				}
				
			    public String JOBNM;

				public String getJOBNM () {
					return this.JOBNM;
				}
				
			    public String LOGINDEPTNM;

				public String getLOGINDEPTNM () {
					return this.LOGINDEPTNM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_Emergency.length) {
				if(length < 1024 && commonByteArray_BUCHEON_Emergency.length == 0) {
   					commonByteArray_BUCHEON_Emergency = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_Emergency = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_Emergency, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_Emergency, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_Emergency) {

        	try {

        		int length = 0;
		
					this.PID = readString(dis);
					
					this.PATNM = readString(dis);
					
					this.MAINORDDEPT = readString(dis);
					
					this.DEPTHNGNM = readString(dis);
					
					this.INDIRECDRID = readString(dis);
					
					this.USERNM = readString(dis);
					
					this.POSDEPTHNGNM = readString(dis);
					
					this.JOBNM = readString(dis);
					
					this.LOGINDEPTNM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PID,dos);
					
					// String
				
						writeString(this.PATNM,dos);
					
					// String
				
						writeString(this.MAINORDDEPT,dos);
					
					// String
				
						writeString(this.DEPTHNGNM,dos);
					
					// String
				
						writeString(this.INDIRECDRID,dos);
					
					// String
				
						writeString(this.USERNM,dos);
					
					// String
				
						writeString(this.POSDEPTHNGNM,dos);
					
					// String
				
						writeString(this.JOBNM,dos);
					
					// String
				
						writeString(this.LOGINDEPTNM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PID="+PID);
		sb.append(",PATNM="+PATNM);
		sb.append(",MAINORDDEPT="+MAINORDDEPT);
		sb.append(",DEPTHNGNM="+DEPTHNGNM);
		sb.append(",INDIRECDRID="+INDIRECDRID);
		sb.append(",USERNM="+USERNM);
		sb.append(",POSDEPTHNGNM="+POSDEPTHNGNM);
		sb.append(",JOBNM="+JOBNM);
		sb.append(",LOGINDEPTNM="+LOGINDEPTNM);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
copyOfcopyOfcopyOfuserStruct copyOfcopyOfcopyOfuser = new copyOfcopyOfcopyOfuserStruct();





	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfuser");
					}
				
		int tos_count_tFileOutputExcel_4 = 0;
		


		int columnIndex_tFileOutputExcel_4 = 0;
		
		int nb_line_tFileOutputExcel_4 = 0;
		
		String fileName_tFileOutputExcel_4="D:/data/EmergencyKPI/응급실KPI_"+TalendDate.formatDate("yyyyMMdd", new Date()) + ".xls";
		java.io.File file_tFileOutputExcel_4 = new java.io.File(fileName_tFileOutputExcel_4);
		boolean isFileGenerated_tFileOutputExcel_4 = true;
		if(file_tFileOutputExcel_4.exists()){
			isFileGenerated_tFileOutputExcel_4 = false;
		}
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_4 = file_tFileOutputExcel_4.getParentFile();
          if (parentFile_tFileOutputExcel_4 != null && !parentFile_tFileOutputExcel_4.exists()) {
        	
             parentFile_tFileOutputExcel_4.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_4 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_4 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_4 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_4.setEncoding("UTF-8");  
        if (file_tFileOutputExcel_4.exists()) {
        jxl.Workbook workbook_tFileOutputExcel_4 = jxl.Workbook.getWorkbook(file_tFileOutputExcel_4,workbookSettings_tFileOutputExcel_4);
        workbookSettings_tFileOutputExcel_4.setWriteAccess(null);
        writeableWorkbook_tFileOutputExcel_4 = new jxl.write.biff.WritableWorkbookImpl(
                	new java.io.BufferedOutputStream(new java.io.FileOutputStream(file_tFileOutputExcel_4, false)), 
                	workbook_tFileOutputExcel_4, 
                	true,
                    workbookSettings_tFileOutputExcel_4);
        }else{        
		writeableWorkbook_tFileOutputExcel_4 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_4)), 
            		true, 
            		workbookSettings_tFileOutputExcel_4);        
        }     

        writableSheet_tFileOutputExcel_4 = writeableWorkbook_tFileOutputExcel_4.getSheet("Sheet4");
        if(writableSheet_tFileOutputExcel_4 == null){
        	writableSheet_tFileOutputExcel_4 = writeableWorkbook_tFileOutputExcel_4.createSheet("Sheet4", writeableWorkbook_tFileOutputExcel_4.getNumberOfSheets());
		}


        //modif start
        int startRowNum_tFileOutputExcel_4 = writableSheet_tFileOutputExcel_4.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_4 = new int[9];
		for(int i_tFileOutputExcel_4=0;i_tFileOutputExcel_4<9;i_tFileOutputExcel_4++){
		    int fitCellViewSize_tFileOutputExcel_4=writableSheet_tFileOutputExcel_4.getColumnView(i_tFileOutputExcel_4).getSize();
			fitWidth_tFileOutputExcel_4[i_tFileOutputExcel_4]=fitCellViewSize_tFileOutputExcel_4/256;
			if(fitCellViewSize_tFileOutputExcel_4%256!=0){
				fitWidth_tFileOutputExcel_4[i_tFileOutputExcel_4]+=1;
			}
		}
		
		jxl.write.WritableFont wf_tFileOutputExcel_4 = new jxl.write.WritableFont(jxl.write.WritableFont.COURIER, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_tFileOutputExcel_4  = new jxl.write.WritableCellFormat(wf_tFileOutputExcel_4); 
		


		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfuserStruct copyOfcopyOfcopyOfuser_tmp = new copyOfcopyOfcopyOfuserStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	


	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_4 = false;
				boolean isConnectionWrapped_tDBInput_4 = !(conn_tDBInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_4 = null;
                if (isConnectionWrapped_tDBInput_4) {
					unwrappedOraConn_tDBInput_4 = conn_tDBInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_4 != null) {
                        isTimeZoneNull_tDBInput_4 = (unwrappedOraConn_tDBInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_4 = (((oracle.jdbc.OracleConnection)conn_tDBInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_4) {
					java.sql.Statement stmtGetTZ_tDBInput_4 = conn_tDBInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_4 = stmtGetTZ_tDBInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_4.next()) {
						sessionTimezone_tDBInput_4 = rsGetTZ_tDBInput_4.getString(1);
					}
					if (isConnectionWrapped_tDBInput_4 && unwrappedOraConn_tDBInput_4 != null) {
                        unwrappedOraConn_tDBInput_4.setSessionTimeZone(sessionTimezone_tDBInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_4).setSessionTimeZone(sessionTimezone_tDBInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "WITH BASE AS (\nSELECT INPT.INDD\n       ,INPT.INTM\n       ,INPT.DSCHDD\n       ,INPT.DSCHTM\n       ,TMP1.PID\n      "
+" ,CASE WHEN INPT.INPATH = '1' AND TMP1.OUTRMCD LIKE '3%'\n             THEN '외래경유 입원'\n             WHEN INPT.INPATH = '"
+"1'\n             THEN '외래경유 내원'\n             WHEN TMP1.OUTRMCD = '14'\n             THEN 'DAMA'\n             WHEN TMP1"
+".OUTRMCD = '13'\n             THEN 'Hopeless Discharge'\n             WHEN TMP1.OUTRMCD = '19'\n             THEN '외래처치대"
+"행'\n             WHEN TMP1.OUTRMCD LIKE '1%'\n             THEN '귀가'\n             WHEN TMP1.OUTRMCD LIKE '2%'\n        "
+"     THEN '전원'\n             WHEN TMP1.OUTRMCD IN ('33', '34')\n             THEN '수술'\n             WHEN TMP1.OUTRMCD L"
+"IKE '3%'\n             THEN '입원'\n             WHEN TMP1.OUTRMCD = '41'\n             THEN 'DOA'\n             WHEN TMP1"
+".OUTRMCD LIKE '4%'\n             THEN '사망'\n             WHEN TMP1.OUTRMCD LIKE '8%'\n             THEN '탈원'\n          "
+"   WHEN TMP1.OUTRMCD LIKE '9%'\n             THEN '기타'\n             WHEN TMP1.OUTRMCD IS NULL OR TMP1.OUTRMCD = ''\n   "
+"          THEN '응급실재원'\n        END AS OUTRMCDNM\n       ,ERCE.BEDPOSCNTS\n       ,CASE WHEN EMR.FN_MN_GETERSDLTDIAG ( I"
+"NPT.INSTCD, INPT.PID, INPT.INDD, INPT.CRETNO, 'D', 'S', 'N') IS NOT NULL THEN 'Y'\n             ELSE NULL \n        END "
+"AS SDDIAGYN         -- 중증상병\n       ,DECODE(TMP1.VISITNO, 0, PTBS.HNGNM , PTBS.HNGNM || 'ⓡ')                   AS PATNM "
+" -- 환자명\n       ,PTBS.SEX                                                                   AS SEX     -- 성별\n       ,CO"
+"M.FN_ZZ_GETAGE ('', '', TO_CHAR(SYSDATE, 'YYYYMMDD'), 'b', PTBS.BRTHDD)  AS AGE     -- 나이\n       ,(SELECT DEPTENGABBR\n"
+"           FROM COM.ZSDDDEPT\n          WHERE INSTCD =  '014'\n            AND DEPTCD = INPT.ERORDDEPTCD\n            AN"
+"D INPT.INDD BETWEEN VALIFROMDD AND VALITODD )                  AS MAINORDDEPT\n       ,(SELECT CHNGROOMCD FROM PAM.PMIHC"
+"DCR\n          WHERE INSTCD = INPT.INSTCD\n            AND PID = INPT.PID\n            AND INDD = INPT.INDD\n           "
+" AND CRETNO = INPT.CRETNO\n            AND MSKIND = 'M'\n            AND HISTSTAT = 'Y'\n            AND ACPTFLAGCD = '3"
+"'\n            AND APPFLAGCD IN ('1','3')\n            AND PRESTWARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD = "
+"INPT.INSTCD AND CDGRUPID = '002' AND TMP1.OUTRMDD BETWEEN VALIFROMDD AND VALITODD)\n            AND SEQNO = ( SELECT MIN"
+"(SEQNO) FROM PAM.PMIHCDCR\n             WHERE INSTCD = INPT.INSTCD\n               AND PID = INPT.PID\n               AN"
+"D INDD = INPT.INDD\n               AND CRETNO = INPT.CRETNO\n               AND MSKIND = 'M'\n               AND HISTSTA"
+"T = 'Y'\n               AND ACPTFLAGCD = '3'\n               AND APPFLAGCD IN ('1','3')\n               AND PRESTWARDCD "
+"IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD = INPT.INSTCD AND CDGRUPID = '002' AND TMP1.OUTRMDD BETWEEN VALIFROMDD AN"
+"D VALITODD)\n               )) AS OUTROOMCD --퇴실시 배정병동.\n       ,CASE WHEN (TMP1.OUTRMDD IS NULL OR TMP1.OUTRMDD = '-')"
+"\n               AND (TMP1.CHOSDD IS NULL OR TMP1.CHOSDD = '-')\n              THEN NULL\n              ELSE ROUND (( TO_"
+"DATE(SUBSTR(TMP1.OUTRMDD || TMP1.OUTRMTM,1,12) , 'yyyymmddhh24mi')\n                         - TO_DATE( SUBSTR(TMP1.CHOS"
+"DD || TMP1.CHOSTM,1,12), 'yyyymmddhh24mi' )) * 24 * 60 )\n        END AS OUTMODIN         -- 퇴실 - 입실\n       ,ROUND((TO_"
+"DATE(CASE WHEN TMP1.MAINCALLDT NOT LIKE '-%'\n                             AND TMP1.MAINCALLDT IS NOT NULL\n            "
+"                THEN SUBSTR(TMP1.MAINCALLDT,1,12) END, 'yyyymmddhh24mi')\n               - TO_DATE( SUBSTR(TMP1.CHOSDD |"
+"| TMP1.CHOSTM,1,12) , 'yyyymmddhh24mi' )) * 24 * 60 ) AS CALLMODIN -- 호출 - 입실\n       ,ROUND((TO_DATE(CASE WHEN TMP1.MAI"
+"NARRIVDT NOT LIKE '-%'\n                             AND TMP1.MAINARRIVDT IS NOT NULL\n                            THEN "
+"SUBSTR(TMP1.MAINARRIVDT,1,12) END, 'yyyymmddhh24mi')\n               - TO_DATE(CASE WHEN TMP1.MAINCALLDT NOT LIKE '-%'\n"
+"                               AND TMP1.MAINCALLDT IS NOT NULL\n                        --       AND tmp1.maincalldt != "
+"''\n                              THEN SUBSTR(TMP1.MAINCALLDT,1,12) END, 'yyyymmddhh24mi' )) * 24 * 60 ) AS VISITMODCALL"
+" -- 도착 - 호출\n       ,CASE WHEN (TMP1.OUTDECIDT IS NULL OR TMP1.OUTDECIDT = '-')\n              AND (TMP1.CHOSDD IS NULL "
+"OR TMP1.CHOSDD = '-')\n             THEN NULL\n             ELSE DECODE(TMP1.OUTDECIDT,'-',NULL,ROUND (( TO_DATE(SUBSTR("
+"TMP1.OUTDECIDT,1,12), 'yyyymmddhh24mi')\n                         - TO_DATE(SUBSTR(TMP1.CHOSDD || TMP1.CHOSTM,1,12), 'yy"
+"yymmddhh24mi' )) * 24 * 60 ))\n        END AS DSCHDCLRMODIN    -- 결정 - 입실\n       ,CASE WHEN (TMP1.OUTRMDD   IS NULL OR "
+"TMP1.OUTRMDD   = '-')\n               OR (TMP1.OUTDECIDT IS NULL OR TMP1.OUTDECIDT = '-')\n             THEN NULL\n     "
+"        ELSE ROUND (( TO_DATE(SUBSTR(TMP1.OUTRMDD || TMP1.OUTRMTM,1,12) , 'yyyymmddhh24mi')\n                         - "
+"TO_DATE( SUBSTR(TMP1.OUTDECIDT,1,12), 'yyyymmddhh24mi' )) * 24 * 60 )\n        END AS OUTMODDSCHDCLR   -- 퇴실 - 결정\n     "
+"  ,DECODE(\n               (SELECT CASE WHEN (TMP1.OUTRMCD LIKE '3%' OR TMP1.OUTRMCD IS NULL) THEN CDCR.PAMACPTDD || CDC"
+"R.PAMACPTTM ELSE '' END\n                  FROM PAM.PMIHCDCR CDCR\n                 WHERE CDCR.INSTCD = INPT.INSTCD\n   "
+"                 AND CDCR.PID = INPT.PID\n                    AND CDCR.INDD = INPT.INDD\n                    AND CDCR.CR"
+"ETNO = INPT.CRETNO\n                    AND CDCR.APPFLAGCD = '3'\n                    AND CDCR.PRESTWARDCD IN (SELECT CD"
+"ID FROM EMR.MNWMCODE WHERE INSTCD =  '014' AND CDGRUPID = '002' AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN VALIFROMDD AND V"
+"ALITODD)\n                    AND CDCR.CHNGWARDCD NOT IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD =  '014' AND CDGRUP"
+"ID = '002' AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN VALIFROMDD AND VALITODD)\n                    AND CDCR.HISTSTAT = 'Y'"
+"\n                    AND EXISTS(SELECT 1\n                                 FROM PAM.PMIHADRV ADRV\n                    "
+"            WHERE ADRV.INRSRVSTAT ='R'\n                                  AND ADRV.ERREGLYN = 'E'\n                     "
+"             AND INPT.INSTCD = ADRV.INSTCD\n                                  AND INPT.PID = ADRV.PID\n                 "
+"                 AND INPT.INDD || INPT.INTM <= ADRV.INRSRVACPTDD || ADRV.INRSRVACPTTM\n                                 "
+" AND INPT.DSCHDD || INPT.DSCHTM >= ADRV.INRSRVACPTDD || ADRV.INRSRVACPTTM)\n                                  AND ROWNUM"
+" = 1	            --2018.06.26 조건추가\n                 ) -- 응급실병실 배정일시\n                 , NULL, NULL\n                 , "
+"'-', NULL  -- 없을경우 제외\n                 , ROUND((TO_DATE(SUBSTR(TMP1.OUTRMDD || TMP1.OUTRMTM,1,12) , 'YYYYMMDDHH24MI')\n"
+"                          - TO_DATE((SELECT CASE WHEN (TMP1.OUTRMCD LIKE '3%' OR TMP1.OUTRMCD IS NULL) THEN SUBSTR(CDCR."
+"PAMACPTDD || CDCR.PAMACPTTM,1,12) ELSE '' END\n                                       FROM PAM.PMIHCDCR CDCR\n          "
+"                            WHERE CDCR.INSTCD = INPT.INSTCD\n                                        AND CDCR.PID = INPT"
+".PID\n                                        AND CDCR.INDD = INPT.INDD\n                                        AND CDC"
+"R.CRETNO = INPT.CRETNO\n                                        AND CDCR.APPFLAGCD = '3'\n                              "
+"          AND CDCR.PRESTWARDCD IN (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD =  '014' AND CDGRUPID = '002' AND TO_CHAR("
+"SYSDATE,'YYYYMMDD') BETWEEN VALIFROMDD AND VALITODD)\n                                        AND CDCR.CHNGWARDCD NOT IN"
+" (SELECT CDID FROM EMR.MNWMCODE WHERE INSTCD =  '014' AND CDGRUPID = '002' AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN VALIF"
+"ROMDD AND VALITODD)\n                                        AND CDCR.HISTSTAT = 'Y'\n                                  "
+"      AND EXISTS(SELECT 1\n                                                     FROM PAM.PMIHADRV ADRV\n                "
+"                                    WHERE ADRV.INRSRVSTAT ='R'\n                                                      AN"
+"D ADRV.ERREGLYN = 'E'\n                                                      AND INPT.INSTCD = ADRV.INSTCD\n            "
+"                                          AND INPT.PID = ADRV.PID\n                                                     "
+" AND INPT.INDD || INPT.INTM <= ADRV.INRSRVACPTDD || ADRV.INRSRVACPTTM\n                                                 "
+"     AND INPT.DSCHDD || INPT.DSCHTM >= ADRV.INRSRVACPTDD || ADRV.INRSRVACPTTM)\n                                        "
+"              AND ROWNUM = 1	            --2018.06.26 조건추가\n                                    ), 'YYYYMMDDHH24MI' )) *"
+" 24 * 60 ) -- 퇴실일시와의 차이 계산\n        ) AS PAMACPTMOOUT --배정-퇴실\n  FROM (SELECT\n                PID\n               ,INDD"
+"\n               ,INSTCD\n               ,CRETNO\n               ,VISITNO\n               ,CHOSDD\n               ,CHOST"
+"M\n               ,OUTRMDD\n               ,OUTRMTM\n               ,OUTRMCD\n               ,OUTDECIDT\n               "
+",LASTPATZONE   --최종진료구역 추가 2017.08.24 jkj\n               ,MAX(DECODE(MAINYN , 'M', DEPTENGABBR, NULL))  MAINDEPT\n     "
+"          ,MAX(DECODE(MAINYN , 'M', CALLDT, NULL))  MAINCALLDT\n               ,MAX(DECODE(MAINYN , 'M', ARRIVDT, NULL))"
+"  MAINARRIVDT\n               ,MAX(DECODE(MAINYN , 'M', ERORDDOCTCD, NULL))  MAINDOCTCD\n               ,MAX(CASE WHEN M"
+"AINYN = 'S' AND MRNUM = 1 THEN  DEPTENGABBR ELSE NULL END) DEPT1\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM ="
+" 1 THEN  CALLDT ELSE NULL END)  CALLDT1\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 1 THEN  ARRIVDT ELSE NUL"
+"L END)  ARRIVDT1\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  DEPTENGABBR ELSE NULL END) DEPT2\n     "
+"          ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 2 THEN  CALLDT ELSE NULL END)  CALLDT2\n               ,MAX(CASE WHEN "
+"MAINYN = 'S' AND MRNUM = 2 THEN  ARRIVDT ELSE NULL END)  ARRIVDT2\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM "
+"= 3 THEN  DEPTENGABBR ELSE NULL END) DEPT3\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  CALLDT ELSE N"
+"ULL END)  CALLDT3\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 3 THEN  ARRIVDT ELSE NULL END)  ARRIVDT3\n    "
+"           ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 4 THEN  DEPTENGABBR ELSE NULL END) DEPT4\n               ,MAX(CASE WH"
+"EN MAINYN = 'S' AND MRNUM = 4 THEN  CALLDT ELSE NULL END)  CALLDT4\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM"
+" = 4 THEN  ARRIVDT ELSE NULL END)  ARRIVDT4\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THEN  DEPTENGABBR "
+"ELSE NULL END) DEPT5\n               ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THEN  CALLDT ELSE NULL END)  CALLDT5\n   "
+"            ,MAX(CASE WHEN MAINYN = 'S' AND MRNUM = 5 THEN  ARRIVDT ELSE NULL END)  ARRIVDT5\n          FROM (\n        "
+"        SELECT\n                        ERVD.PID\n                       ,ERVD.INDD\n                       ,ERVD.INSTCD"
+"\n                       ,ERVD.CRETNO\n                       ,ERVD.VISITNO\n                       ,ERVD.CHOSDD\n      "
+"                 ,ERVD.CHOSTM\n                       ,ERVD.OUTRMDD\n                       ,ERVD.OUTRMTM\n             "
+"          ,ERVD.OUTRMCD\n                       ,ERVD.OUTDECIDT\n                       ,ERVD.LASTPATZONE   --최종진료구역 추가 "
+"2017.08.24 jkj\n                       ,ERCD.CALLDT\n                       ,ERCD.ARRIVDT\n                       ,ERCD."
+"MAINYN\n                       ,ERCD.ERORDDEPTCD\n                       ,ERCD.ERORDDOCTCD\n                       ,DEPT"
+".DEPTENGABBR\n                       ,ROW_NUMBER () OVER (PARTITION BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO, "
+"ERCD.MAINYN ORDER BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN, ERCD.CALLDT) MRNUM\n                 "
+"      ,ROW_NUMBER () OVER (PARTITION BY ERVD.INDD, ERVD.PID,  ERVD.CRETNO, ERVD.VISITNO ORDER BY ERVD.INDD, ERVD.PID,  E"
+"RVD.CRETNO, ERVD.VISITNO, ERCD.MAINYN, ERCD.CALLDT) RNUM\n                  FROM EMR.MNEHERVD ERVD\n                    "
+"   ,EMR.MNEHERCD ERCD\n                       ,COM.ZSDDDEPT DEPT\n                  WHERE ERVD.INSTCD =  '014'\n        "
+"            AND ERVD.OUTRMDD = TO_CHAR(SYSDATE - 1, 'YYYYMMDD')\n                    AND ERVD.OUTRMDD IS NOT NULL\n     "
+"               AND ERVD.INCNCLDT = '-'\n                    AND ERVD.PID = ERCD.PID(+)\n                    AND ERVD.IND"
+"D = ERCD.INDD(+)\n                    AND ERVD.CRETNO = ERCD.CRETNO(+)\n                    AND ERVD.VISITNO = ERCD.VISI"
+"TNO(+)\n                    AND ERVD.INSTCD = ERCD.INSTCD(+)\n                    AND ERCD.HISTCD(+) = 'O'\n            "
+"        AND ERCD.CALLDT(+) !='--------------'\n                    AND ERCD.ERORDDEPTCD = DEPT.DEPTCD(+)\n              "
+"      AND DEPT.INSTCD(+) =  '014'\n                    AND DEPT.VALIFROMDD(+) <= TO_CHAR(SYSDATE, 'YYYYMMDD')\n         "
+"           AND DEPT.VALITODD(+) >= TO_CHAR(SYSDATE, 'YYYYMMDD')\n                 )\n             GROUP BY PID,INDD,INST"
+"CD,CRETNO,VISITNO,CHOSDD,CHOSTM,OUTRMDD,OUTRMTM,OUTRMCD,OUTDECIDT,LASTPATZONE   --최종진료구역 추가 2017.08.24 jkj\n       ) TMP"
+"1\n       ,PAM.PMIHINPT INPT\n       ,PAM.PMCMPTBS PTBS\n       ,EMR.MNEHERCE ERCE\n WHERE TMP1.PID = INPT.PID\n   AND T"
+"MP1.INDD = INPT.INDD\n   AND TMP1.CRETNO = INPT.CRETNO\n   AND TMP1.INSTCD = INPT.INSTCD\n   AND INPT.MSKIND = 'M'\n   A"
+"ND INPT.HISTSTAT = 'Y'\n   AND TMP1.PID = PTBS.PID\n   AND TMP1.INSTCD = PTBS.INSTCD\n   AND INPT.PID = ERCE.PID(+)\n   "
+"AND INPT.INDD = ERCE.INDD(+)\n   AND INPT.CRETNO = ERCE.CRETNO(+)\n   AND INPT.INSTCD = ERCE.INSTCD(+)\n   AND ERCE.INCN"
+"CLDT(+) = '-'\n ORDER BY OUTRMDD, OUTRMTM\n)\nSELECT 'Unit No' PID\n       ,'Name' PATNM\n       ,'주진료과' MAINORDDEPT\n  "
+"     ,'진료과명-입원장' DEPTHNGNM\n       ,'입원지시의사' INDIRECDRID\n       ,'입원지시의사명' USERNM\n       ,'소속부서명' POSDEPTHNGNM\n      "
+" ,'직군' JOBNM\n       ,'로그인부서명' LOGINDEPTNM\n  FROM DUAL\nUNION ALL\nSELECT BASE.PID\n       ,BASE.PATNM\n       ,BASE.MA"
+"INORDDEPT\n       ,(SELECT ZDEP.DEPTHNGNM\n           FROM COM.ZSDDDEPT ZDEP\n          WHERE ZDEP.INSTCD = '014'\n     "
+"       AND ZDEP.DEPTCD = RV.ORDDEPTCD\n            AND ZDEP.VALIFROMDD <= BASE.INDD\n            AND ZDEP.VALITODD   >= "
+"BASE.INDD\n        ) DEPTHNGNM\n       ,RV.INDIRECDRID\n       ,USRB.USERNM\n       ,(SELECT ZDEP.DEPTHNGNM\n           "
+"FROM COM.ZSDDDEPT ZDEP\n          WHERE ZDEP.INSTCD = '014'\n            AND ZDEP.DEPTCD = USRB.POSDEPTCD\n            A"
+"ND ZDEP.VALIFROMDD <= BASE.INDD\n            AND ZDEP.VALITODD   >= BASE.INDD\n        ) POSDEPTHNGNM\n       ,(SELECT C"
+"ODE.CDNM\n           FROM COM.ZBCMCODE CODE\n          WHERE CODE.CDID        = USRB.GRUPJOBLNCD\n            AND CODE.V"
+"ALIFROMDD <=  BASE.INDD\n            AND CODE.VALITODD   >=  BASE.INDD\n            AND CODE.CDGRUPID    ='R0059'\n     "
+"   ) JOBNM\n       ,(SELECT ZDEP.DEPTHNGNM\n           FROM COM.ZSDDDEPT ZDEP\n          WHERE ZDEP.INSTCD = '014'\n    "
+"        AND ZDEP.DEPTCD = (SELECT DUTPLCECD\n                                 FROM COM.ZSUMCLIO\n                       "
+"         WHERE INSTCD = '014'\n                                  AND USERID = RV.INDIRECDRID\n                          "
+"        AND FSTRGSTDT = (SELECT MAX(FSTRGSTDT) \n                                                     FROM COM.ZSUMCLIO"
+"\n                                                    WHERE INSTCD = '014'\n                                             "
+"         AND USERID = RV.INDIRECDRID\n                                                      AND TO_CHAR(FSTRGSTDT, 'YYYY"
+"MMDDHH24MI') <= RV.INRSRVACPTDD || RV.INRSRVACPTTM\n                                                      AND TO_CHAR(LA"
+"STUPDTDT, 'YYYYMMDDHH24MI') >= RV.INRSRVACPTDD || RV.INRSRVACPTTM\n                                                  )\n"
+"                              )\n            AND ZDEP.VALIFROMDD <= BASE.INDD\n            AND ZDEP.VALITODD   >= BASE.I"
+"NDD\n        ) LOGINDEPTNM\n  FROM BASE\n INNER JOIN PAM.PMIHADRV RV\n         ON BASE.PID = RV.PID\n        AND BASE.IN"
+"DD || BASE.INTM <= RV.INRSRVACPTDD || RV.INRSRVACPTTM\n        AND BASE.DSCHDD || BASE.DSCHTM >= RV.INRSRVACPTDD || RV.I"
+"NRSRVACPTTM\n        AND RV.INRSRVSTAT = 'R'\n        AND RV.ERREGLYN = 'E'\n INNER JOIN COM.ZSUMUSRB USRB\n         ON "
+"USRB.USERID = RV.INDIRECDRID\n        AND USRB.USERFROMDD <= BASE.INDD\n        AND USRB.USERTODD   >= BASE.INDD\n WHERE"
+" BASE.OUTRMCDNM = '입원'\n   AND BASE.MAINORDDEPT IN ('IMG', 'IMC')";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row5.PID = null;
							} else {
	                         		
        	row5.PID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row5.PATNM = null;
							} else {
	                         		
        	row5.PATNM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row5.MAINORDDEPT = null;
							} else {
	                         		
        	row5.MAINORDDEPT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row5.DEPTHNGNM = null;
							} else {
	                         		
        	row5.DEPTHNGNM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row5.INDIRECDRID = null;
							} else {
	                         		
        	row5.INDIRECDRID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row5.USERNM = null;
							} else {
	                         		
        	row5.USERNM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row5.POSDEPTHNGNM = null;
							} else {
	                         		
        	row5.POSDEPTHNGNM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row5.JOBNM = null;
							} else {
	                         		
        	row5.JOBNM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row5.LOGINDEPTNM = null;
							} else {
	                         		
        	row5.LOGINDEPTNM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
					




 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfuser = null;


// # Output table : 'copyOfcopyOfcopyOfuser'
copyOfcopyOfcopyOfuser_tmp.PID = row5.PID ;
copyOfcopyOfcopyOfuser_tmp.PATNM = row5.PATNM ;
copyOfcopyOfcopyOfuser_tmp.MAINORDDEPT = row5.MAINORDDEPT ;
copyOfcopyOfcopyOfuser_tmp.DEPTHNGNM = row5.DEPTHNGNM ;
copyOfcopyOfcopyOfuser_tmp.INDIRECDRID = row5.INDIRECDRID ;
copyOfcopyOfcopyOfuser_tmp.USERNM = row5.USERNM ;
copyOfcopyOfcopyOfuser_tmp.POSDEPTHNGNM = row5.POSDEPTHNGNM ;
copyOfcopyOfcopyOfuser_tmp.JOBNM = row5.JOBNM ;
copyOfcopyOfcopyOfuser_tmp.LOGINDEPTNM = row5.LOGINDEPTNM ;
copyOfcopyOfcopyOfuser = copyOfcopyOfcopyOfuser_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfuser"
if(copyOfcopyOfcopyOfuser != null) { 



	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfuser");
					}
					

								   				
	    				if(copyOfcopyOfcopyOfuser.PID != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.PID
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_0_tFileOutputExcel_4);
							int currentWith_0_tFileOutputExcel_4 = cell_0_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[0]=fitWidth_tFileOutputExcel_4[0]>currentWith_0_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[0]:currentWith_0_tFileOutputExcel_4+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfcopyOfuser.PATNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.PATNM
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_1_tFileOutputExcel_4);
							int currentWith_1_tFileOutputExcel_4 = cell_1_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[1]=fitWidth_tFileOutputExcel_4[1]>currentWith_1_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[1]:currentWith_1_tFileOutputExcel_4+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfcopyOfuser.MAINORDDEPT != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.MAINORDDEPT
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_2_tFileOutputExcel_4);
							int currentWith_2_tFileOutputExcel_4 = cell_2_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[2]=fitWidth_tFileOutputExcel_4[2]>currentWith_2_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[2]:currentWith_2_tFileOutputExcel_4+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfcopyOfuser.DEPTHNGNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.DEPTHNGNM
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_3_tFileOutputExcel_4);
							int currentWith_3_tFileOutputExcel_4 = cell_3_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[3]=fitWidth_tFileOutputExcel_4[3]>currentWith_3_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[3]:currentWith_3_tFileOutputExcel_4+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfcopyOfuser.INDIRECDRID != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.INDIRECDRID
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_4_tFileOutputExcel_4);
							int currentWith_4_tFileOutputExcel_4 = cell_4_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[4]=fitWidth_tFileOutputExcel_4[4]>currentWith_4_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[4]:currentWith_4_tFileOutputExcel_4+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfcopyOfuser.USERNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.USERNM
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_5_tFileOutputExcel_4);
							int currentWith_5_tFileOutputExcel_4 = cell_5_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[5]=fitWidth_tFileOutputExcel_4[5]>currentWith_5_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[5]:currentWith_5_tFileOutputExcel_4+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfcopyOfuser.POSDEPTHNGNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.POSDEPTHNGNM
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_6_tFileOutputExcel_4);
							int currentWith_6_tFileOutputExcel_4 = cell_6_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[6]=fitWidth_tFileOutputExcel_4[6]>currentWith_6_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[6]:currentWith_6_tFileOutputExcel_4+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfcopyOfuser.JOBNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.JOBNM
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_7_tFileOutputExcel_4);
							int currentWith_7_tFileOutputExcel_4 = cell_7_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[7]=fitWidth_tFileOutputExcel_4[7]>currentWith_7_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[7]:currentWith_7_tFileOutputExcel_4+2;
	    				} 
					
								   				
	    				if(copyOfcopyOfcopyOfuser.LOGINDEPTNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_4 = 8;
					

					
						jxl.write.WritableCell cell_8_tFileOutputExcel_4 = new jxl.write.Label(columnIndex_tFileOutputExcel_4, startRowNum_tFileOutputExcel_4 + nb_line_tFileOutputExcel_4,
					
//modif end
								copyOfcopyOfcopyOfuser.LOGINDEPTNM
						,format_tFileOutputExcel_4
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_4.addCell(cell_8_tFileOutputExcel_4);
							int currentWith_8_tFileOutputExcel_4 = cell_8_tFileOutputExcel_4.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[8]=fitWidth_tFileOutputExcel_4[8]>currentWith_8_tFileOutputExcel_4?fitWidth_tFileOutputExcel_4[8]:currentWith_8_tFileOutputExcel_4+2;
	    				} 
					
    			nb_line_tFileOutputExcel_4++;
				
 


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfuser"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}

globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

							columnIndex_tFileOutputExcel_4 = 0;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[0]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_4 = 1;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[1]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_4 = 2;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[2]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_4 = 3;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[3]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_4 = 4;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[4]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_4 = 5;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[5]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_4 = 6;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[6]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_4 = 7;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[7]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_4 = 8;
						
	//modif start
		
			writableSheet_tFileOutputExcel_4.setColumnView(columnIndex_tFileOutputExcel_4, fitWidth_tFileOutputExcel_4[8]);
		
	//modif end
	
		writeableWorkbook_tFileOutputExcel_4.write();
		writeableWorkbook_tFileOutputExcel_4.close();
		
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfuser");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tWaitForFile_1Process(globalMap);



/**
 * [tFileOutputExcel_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tWaitForFile_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWaitForFile_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWaitForFile_1", false);
		start_Hash.put("tWaitForFile_1", System.currentTimeMillis());
		
	
	currentComponent="tWaitForFile_1";

	
		int tos_count_tWaitForFile_1 = 0;
		

       
        class Util_tWaitForFile_1 {

            private boolean flagt = false;

            private java.util.regex.Pattern fileNamePatternt = null;
        	private java.util.List<String> list;
			public java.util.List<String> getFiles(){
				setFiles();
				return list;
			}
        	public Util_tWaitForFile_1(){
				this.list = new java.util.ArrayList<String>();
			}
			public void addFile(java.io.File file){
				this.list.add(file.getPath());
			}
            void setFiles() {
                String directoryt = "D:/data/EmergencyKPI";
                String filemaskt = "응급실KPI_"+TalendDate.formatDate("yyyyMMdd", new Date()) + ".xls"+"$";

                if (filemaskt.indexOf("^") == -1) {
                    filemaskt = "^" + filemaskt;
                }
                if (!(filemaskt.lastIndexOf(".*$") == -1) && filemaskt.lastIndexOf("*.*$") == -1) {
                    filemaskt = filemaskt.substring(0, filemaskt.length() - 3) + "$";
                    flagt = true;
                } else {
                    filemaskt = java.util.regex.Pattern.compile("[*]").matcher(filemaskt).replaceAll(".*");
                }

                boolean case_sensitivet = true;
                fileNamePatternt = java.util.regex.Pattern.compile(filemaskt);
                if (!case_sensitivet) {
                    fileNamePatternt = java.util.regex.Pattern.compile(filemaskt, java.util.regex.Pattern.CASE_INSENSITIVE);
                }
                java.io.File filet = new java.io.File(directoryt);
                filet.listFiles(new java.io.FilenameFilter() {

                    public boolean accept(java.io.File dir, String name) {
                        java.io.File file = new java.io.File(dir, name);
                        if (file.isFile()) {
                            String fileNamet = name;
                            if (flagt == true) {
                                if (!(fileNamet.indexOf(".") == -1)) {
                                    if (fileNamePatternt.matcher(fileNamet.substring(0, fileNamet.indexOf("."))).find()) {
                                        addFile(file);

                                    }
                                } else {
                                    if (fileNamePatternt.matcher(fileNamet).find()) {
                                        addFile(file);
                                    }
                                }
                            } else {
                                if (fileNamePatternt.matcher(fileNamet).find()) {
                                    addFile(file);
                                }
                            }

                            return true;
                        }                         
                        return false;
                    }

                });

            }
			java.util.List<java.io.File> getCreatedFiles(java.util.List<String> originalFiles, java.util.List<String> fetchOneTimeFiles) {
				java.util.List<java.io.File> newCreatedFiles = new java.util.ArrayList<java.io.File>();
				String [] array = originalFiles.toArray(new String[]{});
				for(String file: fetchOneTimeFiles){
					int index = java.util.Arrays.binarySearch(array, file);
					if(index<0){
						newCreatedFiles.add(new java.io.File(file));
					}
				}
				return newCreatedFiles;
			}
			
        }
            
        Util_tWaitForFile_1 util_tWaitForFile_1 = new Util_tWaitForFile_1();
        java.util.List<String> originalFiles_tWaitForFile_1 = util_tWaitForFile_1.getFiles();            
      
        int count_tWaitForFile_1 = 0;
        
        
        while (true) {                
                if (count_tWaitForFile_1 == 100 ) {
                    break;
                }                
            boolean found_tWaitForFile_1 = false;
			util_tWaitForFile_1 = new Util_tWaitForFile_1();
			
            java.util.List<String> fetchFilesOneTime_tWaitForFile_1 = util_tWaitForFile_1.getFiles();
            
			List<String> intersectionList = new java.util.ArrayList<String>();
			
			for(String cachedFile : originalFiles_tWaitForFile_1)
			{
				if(fetchFilesOneTime_tWaitForFile_1.contains(cachedFile))
				{
					intersectionList.add(cachedFile);
				}
			}     
            
            util_tWaitForFile_1 = new Util_tWaitForFile_1();
				originalFiles_tWaitForFile_1 = intersectionList;
            	if(globalMap.get("tWaitForFile_1_CREATED_FILE") != null){
	                globalMap.remove("tWaitForFile_1_CREATED_FILE");
				}
				java.util.Collections.sort(originalFiles_tWaitForFile_1);
                java.util.List<java.io.File> newCreatedFiles_tWaitForFile_1 = util_tWaitForFile_1.getCreatedFiles(originalFiles_tWaitForFile_1,fetchFilesOneTime_tWaitForFile_1);

               	for ( int i=0; i< newCreatedFiles_tWaitForFile_1.size(); i++) {
					java.io.File file_tWaitForFile_1 = newCreatedFiles_tWaitForFile_1.get(i);
           			
					
                    globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
                    globalMap.put("tWaitForFile_1_CREATED_FILE", file_tWaitForFile_1.getAbsolutePath());
                    found_tWaitForFile_1 = true;
                    originalFiles_tWaitForFile_1.add(file_tWaitForFile_1.getPath());              
                    break;
            	}
			

            count_tWaitForFile_1++;
            
            globalMap.put("tWaitForFile_1_CURRENT_ITERATION", count_tWaitForFile_1);
            
            if (!found_tWaitForFile_1) {
				
            	Thread.sleep(1 * 1000);
                continue;
            }            
            

 



/**
 * [tWaitForFile_1 begin ] stop
 */
	
	/**
	 * [tWaitForFile_1 main ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 


	tos_count_tWaitForFile_1++;

/**
 * [tWaitForFile_1 main ] stop
 */
	
	/**
	 * [tWaitForFile_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 process_data_begin ] stop
 */
	
	/**
	 * [tWaitForFile_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 process_data_end ] stop
 */
	
	/**
	 * [tWaitForFile_1 end ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

    if(false){
        break;
    }
}


 

ok_Hash.put("tWaitForFile_1", true);
end_Hash.put("tWaitForFile_1", System.currentTimeMillis());




/**
 * [tWaitForFile_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWaitForFile_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tSystem_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWaitForFile_1 finally ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 1);
	}
	

public void tSystem_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSystem_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSystem_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSystem_2", false);
		start_Hash.put("tSystem_2", System.currentTimeMillis());
		
	
	currentComponent="tSystem_2";

	
		int tos_count_tSystem_2 = 0;
		

Runtime runtime_tSystem_2 = Runtime.getRuntime();

String[] env_tSystem_2= null;
java.util.Map<String,String> envMap_tSystem_2= System.getenv();
java.util.Map<String,String> envMapClone_tSystem_2= new java.util.HashMap();
envMapClone_tSystem_2.putAll(envMap_tSystem_2);

	
final Process ps_tSystem_2 = runtime_tSystem_2.exec( "cmd /c java -Dfile.encoding=UTF-8 -jar CompactCTalkSender.jar " + context.cmctalk_user + " " + context.cmctalk_password + " " + context.cmctalk_roomno + " D:/data/EmergencyKPI/응급실KPI_"+TalendDate.formatDate("yyyyMMdd", new Date()) + ".xls" ,env_tSystem_2,new java.io.File("D:/data/EmergencyKPI/CompactCTalkSender"));

globalMap.remove("tSystem_2_OUTPUT");
globalMap.remove("tSystem_2_ERROROUTPUT");

Thread normal_tSystem_2 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_2.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.out.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
normal_tSystem_2.start();

Thread error_tSystem_2 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_2.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
error_tSystem_2.start();
if(ps_tSystem_2.getOutputStream()!=null){
    ps_tSystem_2.getOutputStream().close();
}
ps_tSystem_2.waitFor();
normal_tSystem_2.join(10000);
error_tSystem_2.join(10000);


 



/**
 * [tSystem_2 begin ] stop
 */
	
	/**
	 * [tSystem_2 main ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	


 


	tos_count_tSystem_2++;

/**
 * [tSystem_2 main ] stop
 */
	
	/**
	 * [tSystem_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	

 



/**
 * [tSystem_2 process_data_begin ] stop
 */
	
	/**
	 * [tSystem_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	

 



/**
 * [tSystem_2 process_data_end ] stop
 */
	
	/**
	 * [tSystem_2 end ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	

globalMap.put("tSystem_2_EXIT_VALUE", ps_tSystem_2.exitValue());

 

ok_Hash.put("tSystem_2", true);
end_Hash.put("tSystem_2", System.currentTimeMillis());




/**
 * [tSystem_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSystem_2 finally ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	

 



/**
 * [tSystem_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSystem_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Emergency EmergencyClass = new Emergency();

        int exitCode = EmergencyClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Emergency.class.getClassLoader().getResourceAsStream("bucheon/emergency_0_9/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Emergency.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("cmctalk_user", "id_String");
                            context.cmctalk_user=(String) context.getProperty("cmctalk_user");
                        context.setContextType("cmctalk_password", "id_String");
                            context.cmctalk_password=(String) context.getProperty("cmctalk_password");
                        context.setContextType("cmctalk_roomno", "id_String");
                            context.cmctalk_roomno=(String) context.getProperty("cmctalk_roomno");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cmctalk_user")) {
                context.cmctalk_user = (String) parentContextMap.get("cmctalk_user");
            }if (parentContextMap.containsKey("cmctalk_password")) {
                context.cmctalk_password = (String) parentContextMap.get("cmctalk_password");
            }if (parentContextMap.containsKey("cmctalk_roomno")) {
                context.cmctalk_roomno = (String) parentContextMap.get("cmctalk_roomno");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Emergency");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     263994 characters generated by Talend Open Studio for Data Integration 
 *     on the 2022년 7월 14일 (목) 오후 2시 06분 22초
 ************************************************************************************************/