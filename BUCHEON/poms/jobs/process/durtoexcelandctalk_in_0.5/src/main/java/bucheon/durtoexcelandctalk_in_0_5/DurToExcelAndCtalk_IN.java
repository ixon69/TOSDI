// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package bucheon.durtoexcelandctalk_in_0_5;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: DurToExcelAndCtalk_IN Purpose: export dur suspect<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class DurToExcelAndCtalk_IN implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(in_user != null){
				
					this.setProperty("in_user", in_user.toString());
				
			}
			
			if(in_password != null){
				
					this.setProperty("in_password", in_password.toString());
				
			}
			
			if(in_roomno != null){
				
					this.setProperty("in_roomno", in_roomno.toString());
				
			}
			
		}

public String in_user;
public String getIn_user(){
	return this.in_user;
}
public String in_password;
public String getIn_password(){
	return this.in_password;
}
public String in_roomno;
public String getIn_roomno(){
	return this.in_roomno;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.5";
	private final String jobName = "DurToExcelAndCtalk_IN";
	private final String projectName = "BUCHEON";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DurToExcelAndCtalk_IN.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DurToExcelAndCtalk_IN.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputProperties_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSystem_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSystem_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSystem_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSystem_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputProperties_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSystem_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSystem_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String url_tDBConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "172.17.71.152" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "HIS014" + ")))";
    	globalMap.put("connectionType_" + "tDBConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tDBConnection_1 = "DEVU02";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:bwDBzXSvvl3Gy6Fke7AdxmRXzKrPYNEZKxmdrglzhe0yYg==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			java.util.Properties atnParamsPrope_tDBConnection_1 = new java.util.Properties();
			    atnParamsPrope_tDBConnection_1.put("user",dbUser_tDBConnection_1);
			    atnParamsPrope_tDBConnection_1.put("password",dbPwd_tDBConnection_1);
			if("noDatetimeStringSync=true" != null && !"\"\"".equals("noDatetimeStringSync=true") && !"".equals("noDatetimeStringSync=true")){
                atnParamsPrope_tDBConnection_1.load(new java.io.ByteArrayInputStream("noDatetimeStringSync=true".replace("&", "\n").getBytes()));
            }
         
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, atnParamsPrope_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}
        globalMap.put("host_" + "tDBConnection_1","172.17.71.152");
        globalMap.put("port_" + "tDBConnection_1","1521");
        globalMap.put("dbname_" + "tDBConnection_1","HIS014");

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);
	globalMap.put("dbschema_" + "tDBConnection_1", "");
	globalMap.put("username_" + "tDBConnection_1","DEVU02");
	globalMap.put("password_" + "tDBConnection_1",dbPwd_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputProperties_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_BUCHEON_DurToExcelAndCtalk_IN = new byte[0];
    static byte[] commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_DurToExcelAndCtalk_IN.length) {
				if(length < 1024 && commonByteArray_BUCHEON_DurToExcelAndCtalk_IN.length == 0) {
   					commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_DurToExcelAndCtalk_IN, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_DurToExcelAndCtalk_IN, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_DurToExcelAndCtalk_IN) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputProperties_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputProperties_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputProperties_1", false);
		start_Hash.put("tFileInputProperties_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputProperties_1";

	
		int tos_count_tFileInputProperties_1 = 0;
		

	java.io.File file_tFileInputProperties_1 = new java.io.File("D:/data/DurBatch/CompactCTalkSender/durbatch.properties");
	int nb_line_tFileInputProperties_1 = 0;
	java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
	java.io.FileInputStream fis_tFileInputProperties_1=new java.io.FileInputStream(file_tFileInputProperties_1);
   	try{
		properties_tFileInputProperties_1.load(fis_tFileInputProperties_1);
		java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1.propertyNames();
		while (enumeration_tFileInputProperties_1.hasMoreElements()) {
			nb_line_tFileInputProperties_1++;
			row3.key = (String)enumeration_tFileInputProperties_1.nextElement();
			row3.value = (String)properties_tFileInputProperties_1.getProperty(row3.key);

 



/**
 * [tFileInputProperties_1 begin ] stop
 */
	
	/**
	 * [tFileInputProperties_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 


	tos_count_tFileInputProperties_1++;

/**
 * [tFileInputProperties_1 main ] stop
 */
	
	/**
	 * [tFileInputProperties_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 process_data_begin ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row3.key != null){
                          tmp_key_tContextLoad_1 = row3.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row3.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row3.key != null) {
                    key_tContextLoad_1 =
                        row3.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row3.value != null) {
                    value_tContextLoad_1 =
                        row3.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
				

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "in_user".equals(key_tContextLoad_1))
        {
           context.in_user=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "in_password".equals(key_tContextLoad_1))
        {
           context.in_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "in_roomno".equals(key_tContextLoad_1))
        {
           context.in_roomno=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */



	
	/**
	 * [tFileInputProperties_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputProperties_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

		}
	}finally{
		if(fis_tFileInputProperties_1!=null){
			fis_tFileInputProperties_1.close();
		}
	}
globalMap.put("tFileInputProperties_1_NB_LINE", nb_line_tFileInputProperties_1);
 

ok_Hash.put("tFileInputProperties_1", true);
end_Hash.put("tFileInputProperties_1", System.currentTimeMillis());




/**
 * [tFileInputProperties_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputProperties_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputProperties_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_BUCHEON_DurToExcelAndCtalk_IN = new byte[0];
    static byte[] commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[0];

	
			    public String CNT;

				public String getCNT () {
					return this.CNT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_DurToExcelAndCtalk_IN.length) {
				if(length < 1024 && commonByteArray_BUCHEON_DurToExcelAndCtalk_IN.length == 0) {
   					commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_DurToExcelAndCtalk_IN, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_DurToExcelAndCtalk_IN, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_DurToExcelAndCtalk_IN) {

        	try {

        		int length = 0;
		
					this.CNT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CNT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CNT="+CNT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	


	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_1 = false;
				boolean isConnectionWrapped_tDBInput_1 = !(conn_tDBInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_1 = null;
                if (isConnectionWrapped_tDBInput_1) {
					unwrappedOraConn_tDBInput_1 = conn_tDBInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_1 != null) {
                        isTimeZoneNull_tDBInput_1 = (unwrappedOraConn_tDBInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_1 = (((oracle.jdbc.OracleConnection)conn_tDBInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_1) {
					java.sql.Statement stmtGetTZ_tDBInput_1 = conn_tDBInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_1 = stmtGetTZ_tDBInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_1.next()) {
						sessionTimezone_tDBInput_1 = rsGetTZ_tDBInput_1.getString(1);
					}
					if (isConnectionWrapped_tDBInput_1 && unwrappedOraConn_tDBInput_1 != null) {
                        unwrappedOraConn_tDBInput_1.setSessionTimeZone(sessionTimezone_tDBInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_1).setSessionTimeZone(sessionTimezone_tDBInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT COUNT(*) CNT FROM (\nSELECT DISTINCT '입원예약' AS GUGUN,\n       A.PATINHOPEDD AS RSRVDD,\n       COM.FN_ZS_GETDEPT"
+"NAME(A.INSTCD, A.ORDDEPTCD, A.PATINHOPEDD) AS ORDDEPTNM, --진료과\n       COM.FN_ZS_GETUSERNM(A.ORDDRID, A.INDIRECDD) AS OR"
+"DDRNM,   --진료의사\n       A.PID AS PID,    --등록번호\n       E.HNGNM,  --성명\n       E.RRGSTNO1 || SUBSTR(E.RRGSTNO2,0,1)||'**"
+"****' AS RRGSTNO,   --주민번호\n       E.HOMETEL AS HOMETEL,    -- 연락처\n       E.MPPHONTEL AS MPPHONTEL,    -- 휴대폰\n       '"
+"' AS ACPTDD,    --접수일자\n       A.PATINHOPEDD AS ORDDD,    --진료일자\n       '' AS ORDTM,    --시간\n       '' AS RSRVFLAG,  -"
+"-예약구분\n       '' AS FSEXAMFLAG,  --초재진\n       '' AS PRCPCD,   --처방코드\n       '' AS PRCPNM,   --처방명칭\n       '' AS EXECD"
+"EPTNM,   --시행부서\n       (SELECT Y.TMP31 FROM PAM.SERVICECOOP Y WHERE Y.TMP01 = 'ZIKA' AND Y.TMP02 = E.RRGSTNO1 AND Y.TMP"
+"03 = E.RRGSTNO2 AND Y.TMP11 = 'Y' AND ROWNUM =1 ) AS REMFACT --전송내역\n  FROM PAM.PMIHADRV A, PAM.PMCMPTBS B, PAM.PMIHINPT"
+" C, PAM.PMCMPTBS E\n WHERE A.PID = B.PID\n   AND A.INSTCD = B.INSTCD\n   AND A.INSTCD = '014'\n   AND A.INSTCD = E.INSTC"
+"D\n   AND A.PID = E.PID\n   AND C.INSTCD(+) = A.INSTCD\n   AND C.PID(+) = A.PID\n   AND C.HISTSTAT(+) = 'Y'\n   AND C.IN"
+"DSCHACPTSTAT(+) = 'A'\n   AND C.DSCHDD(+) = '99991231'\n   AND C.ORDTYPE(+) = 'I'\n   AND A.INRSRVSTAT IN ('S','R')\n   "
+"AND A.INFLAG = 'G'\n   AND A.ERREGLYN IN ('I','F','R','G','D')\n   AND A.PATINHOPEDD BETWEEN TO_CHAR(SYSDATE + 1, 'YYYYM"
+"MDD') AND (SELECT MIN(BASEDD) FROM PAM.PMBMHSCH WHERE BASEDD > TO_CHAR(SYSDATE, 'YYYYMMDD') AND HISTSTAT = 'Y' AND DUTFL"
+"AG = '0')\n   AND EXISTS\n       (SELECT Y.TMP04\n          FROM PAM.SERVICECOOP Y\n         WHERE Y.TMP01 = 'ZIKA'\n   "
+"        AND Y.TMP11 = 'Y'\n           AND Y.TMP02 = E.RRGSTNO1\n           AND Y.TMP03 = E.RRGSTNO2\n           AND Y.TM"
+"P10 = E.PID)\n)";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.CNT = null;
							} else {
	                         		
        	row2.CNT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
					




 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

    globalMap.put("cnt", row2.CNT);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}

globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

   			if (Integer.valueOf(globalMap.get("cnt").toString()) > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tDBInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (Integer.valueOf(globalMap.get("cnt").toString()) == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tSystem_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class userStruct implements routines.system.IPersistableRow<userStruct> {
    final static byte[] commonByteArrayLock_BUCHEON_DurToExcelAndCtalk_IN = new byte[0];
    static byte[] commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[0];

	
			    public String GUBUN;

				public String getGUBUN () {
					return this.GUBUN;
				}
				
			    public String RSRVDD;

				public String getRSRVDD () {
					return this.RSRVDD;
				}
				
			    public String ORDDEPTNM;

				public String getORDDEPTNM () {
					return this.ORDDEPTNM;
				}
				
			    public String ORDDRNM;

				public String getORDDRNM () {
					return this.ORDDRNM;
				}
				
			    public String PID;

				public String getPID () {
					return this.PID;
				}
				
			    public String HNGNM;

				public String getHNGNM () {
					return this.HNGNM;
				}
				
			    public String RRGSTNO;

				public String getRRGSTNO () {
					return this.RRGSTNO;
				}
				
			    public String HOMETEL;

				public String getHOMETEL () {
					return this.HOMETEL;
				}
				
			    public String MPPHONTEL;

				public String getMPPHONTEL () {
					return this.MPPHONTEL;
				}
				
			    public String ACPTDD;

				public String getACPTDD () {
					return this.ACPTDD;
				}
				
			    public String ORDDD;

				public String getORDDD () {
					return this.ORDDD;
				}
				
			    public String ORDTM;

				public String getORDTM () {
					return this.ORDTM;
				}
				
			    public String RSRVFLAG;

				public String getRSRVFLAG () {
					return this.RSRVFLAG;
				}
				
			    public String FSEXAMFLAG;

				public String getFSEXAMFLAG () {
					return this.FSEXAMFLAG;
				}
				
			    public String PRCPCD;

				public String getPRCPCD () {
					return this.PRCPCD;
				}
				
			    public String PRCPNM;

				public String getPRCPNM () {
					return this.PRCPNM;
				}
				
			    public String EXECDEPTNM;

				public String getEXECDEPTNM () {
					return this.EXECDEPTNM;
				}
				
			    public String REMFACT;

				public String getREMFACT () {
					return this.REMFACT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_DurToExcelAndCtalk_IN.length) {
				if(length < 1024 && commonByteArray_BUCHEON_DurToExcelAndCtalk_IN.length == 0) {
   					commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_DurToExcelAndCtalk_IN, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_DurToExcelAndCtalk_IN, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_DurToExcelAndCtalk_IN) {

        	try {

        		int length = 0;
		
					this.GUBUN = readString(dis);
					
					this.RSRVDD = readString(dis);
					
					this.ORDDEPTNM = readString(dis);
					
					this.ORDDRNM = readString(dis);
					
					this.PID = readString(dis);
					
					this.HNGNM = readString(dis);
					
					this.RRGSTNO = readString(dis);
					
					this.HOMETEL = readString(dis);
					
					this.MPPHONTEL = readString(dis);
					
					this.ACPTDD = readString(dis);
					
					this.ORDDD = readString(dis);
					
					this.ORDTM = readString(dis);
					
					this.RSRVFLAG = readString(dis);
					
					this.FSEXAMFLAG = readString(dis);
					
					this.PRCPCD = readString(dis);
					
					this.PRCPNM = readString(dis);
					
					this.EXECDEPTNM = readString(dis);
					
					this.REMFACT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GUBUN,dos);
					
					// String
				
						writeString(this.RSRVDD,dos);
					
					// String
				
						writeString(this.ORDDEPTNM,dos);
					
					// String
				
						writeString(this.ORDDRNM,dos);
					
					// String
				
						writeString(this.PID,dos);
					
					// String
				
						writeString(this.HNGNM,dos);
					
					// String
				
						writeString(this.RRGSTNO,dos);
					
					// String
				
						writeString(this.HOMETEL,dos);
					
					// String
				
						writeString(this.MPPHONTEL,dos);
					
					// String
				
						writeString(this.ACPTDD,dos);
					
					// String
				
						writeString(this.ORDDD,dos);
					
					// String
				
						writeString(this.ORDTM,dos);
					
					// String
				
						writeString(this.RSRVFLAG,dos);
					
					// String
				
						writeString(this.FSEXAMFLAG,dos);
					
					// String
				
						writeString(this.PRCPCD,dos);
					
					// String
				
						writeString(this.PRCPNM,dos);
					
					// String
				
						writeString(this.EXECDEPTNM,dos);
					
					// String
				
						writeString(this.REMFACT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GUBUN="+GUBUN);
		sb.append(",RSRVDD="+RSRVDD);
		sb.append(",ORDDEPTNM="+ORDDEPTNM);
		sb.append(",ORDDRNM="+ORDDRNM);
		sb.append(",PID="+PID);
		sb.append(",HNGNM="+HNGNM);
		sb.append(",RRGSTNO="+RRGSTNO);
		sb.append(",HOMETEL="+HOMETEL);
		sb.append(",MPPHONTEL="+MPPHONTEL);
		sb.append(",ACPTDD="+ACPTDD);
		sb.append(",ORDDD="+ORDDD);
		sb.append(",ORDTM="+ORDTM);
		sb.append(",RSRVFLAG="+RSRVFLAG);
		sb.append(",FSEXAMFLAG="+FSEXAMFLAG);
		sb.append(",PRCPCD="+PRCPCD);
		sb.append(",PRCPNM="+PRCPNM);
		sb.append(",EXECDEPTNM="+EXECDEPTNM);
		sb.append(",REMFACT="+REMFACT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(userStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BUCHEON_DurToExcelAndCtalk_IN = new byte[0];
    static byte[] commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[0];

	
			    public String GUBUN;

				public String getGUBUN () {
					return this.GUBUN;
				}
				
			    public String RSRVDD;

				public String getRSRVDD () {
					return this.RSRVDD;
				}
				
			    public String ORDDEPTNM;

				public String getORDDEPTNM () {
					return this.ORDDEPTNM;
				}
				
			    public String ORDDRNM;

				public String getORDDRNM () {
					return this.ORDDRNM;
				}
				
			    public String PID;

				public String getPID () {
					return this.PID;
				}
				
			    public String HNGNM;

				public String getHNGNM () {
					return this.HNGNM;
				}
				
			    public String RRGSTNO;

				public String getRRGSTNO () {
					return this.RRGSTNO;
				}
				
			    public String HOMETEL;

				public String getHOMETEL () {
					return this.HOMETEL;
				}
				
			    public String MPPHONTEL;

				public String getMPPHONTEL () {
					return this.MPPHONTEL;
				}
				
			    public String ACPTDD;

				public String getACPTDD () {
					return this.ACPTDD;
				}
				
			    public String ORDDD;

				public String getORDDD () {
					return this.ORDDD;
				}
				
			    public String ORDTM;

				public String getORDTM () {
					return this.ORDTM;
				}
				
			    public String RSRVFLAG;

				public String getRSRVFLAG () {
					return this.RSRVFLAG;
				}
				
			    public String FSEXAMFLAG;

				public String getFSEXAMFLAG () {
					return this.FSEXAMFLAG;
				}
				
			    public String PRCPCD;

				public String getPRCPCD () {
					return this.PRCPCD;
				}
				
			    public String PRCPNM;

				public String getPRCPNM () {
					return this.PRCPNM;
				}
				
			    public String EXECDEPTNM;

				public String getEXECDEPTNM () {
					return this.EXECDEPTNM;
				}
				
			    public String REMFACT;

				public String getREMFACT () {
					return this.REMFACT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BUCHEON_DurToExcelAndCtalk_IN.length) {
				if(length < 1024 && commonByteArray_BUCHEON_DurToExcelAndCtalk_IN.length == 0) {
   					commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[1024];
				} else {
   					commonByteArray_BUCHEON_DurToExcelAndCtalk_IN = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BUCHEON_DurToExcelAndCtalk_IN, 0, length);
			strReturn = new String(commonByteArray_BUCHEON_DurToExcelAndCtalk_IN, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BUCHEON_DurToExcelAndCtalk_IN) {

        	try {

        		int length = 0;
		
					this.GUBUN = readString(dis);
					
					this.RSRVDD = readString(dis);
					
					this.ORDDEPTNM = readString(dis);
					
					this.ORDDRNM = readString(dis);
					
					this.PID = readString(dis);
					
					this.HNGNM = readString(dis);
					
					this.RRGSTNO = readString(dis);
					
					this.HOMETEL = readString(dis);
					
					this.MPPHONTEL = readString(dis);
					
					this.ACPTDD = readString(dis);
					
					this.ORDDD = readString(dis);
					
					this.ORDTM = readString(dis);
					
					this.RSRVFLAG = readString(dis);
					
					this.FSEXAMFLAG = readString(dis);
					
					this.PRCPCD = readString(dis);
					
					this.PRCPNM = readString(dis);
					
					this.EXECDEPTNM = readString(dis);
					
					this.REMFACT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GUBUN,dos);
					
					// String
				
						writeString(this.RSRVDD,dos);
					
					// String
				
						writeString(this.ORDDEPTNM,dos);
					
					// String
				
						writeString(this.ORDDRNM,dos);
					
					// String
				
						writeString(this.PID,dos);
					
					// String
				
						writeString(this.HNGNM,dos);
					
					// String
				
						writeString(this.RRGSTNO,dos);
					
					// String
				
						writeString(this.HOMETEL,dos);
					
					// String
				
						writeString(this.MPPHONTEL,dos);
					
					// String
				
						writeString(this.ACPTDD,dos);
					
					// String
				
						writeString(this.ORDDD,dos);
					
					// String
				
						writeString(this.ORDTM,dos);
					
					// String
				
						writeString(this.RSRVFLAG,dos);
					
					// String
				
						writeString(this.FSEXAMFLAG,dos);
					
					// String
				
						writeString(this.PRCPCD,dos);
					
					// String
				
						writeString(this.PRCPNM,dos);
					
					// String
				
						writeString(this.EXECDEPTNM,dos);
					
					// String
				
						writeString(this.REMFACT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GUBUN="+GUBUN);
		sb.append(",RSRVDD="+RSRVDD);
		sb.append(",ORDDEPTNM="+ORDDEPTNM);
		sb.append(",ORDDRNM="+ORDDRNM);
		sb.append(",PID="+PID);
		sb.append(",HNGNM="+HNGNM);
		sb.append(",RRGSTNO="+RRGSTNO);
		sb.append(",HOMETEL="+HOMETEL);
		sb.append(",MPPHONTEL="+MPPHONTEL);
		sb.append(",ACPTDD="+ACPTDD);
		sb.append(",ORDDD="+ORDDD);
		sb.append(",ORDTM="+ORDTM);
		sb.append(",RSRVFLAG="+RSRVFLAG);
		sb.append(",FSEXAMFLAG="+FSEXAMFLAG);
		sb.append(",PRCPCD="+PRCPCD);
		sb.append(",PRCPNM="+PRCPNM);
		sb.append(",EXECDEPTNM="+EXECDEPTNM);
		sb.append(",REMFACT="+REMFACT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
userStruct user = new userStruct();





	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"user");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		int nb_line_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="D:/data/DurBatch/해외감염병정보_입원_"+TalendDate.formatDate("yyyyMMdd", new Date()) + ".xls";
		java.io.File file_tFileOutputExcel_2 = new java.io.File(fileName_tFileOutputExcel_2);
		boolean isFileGenerated_tFileOutputExcel_2 = true;
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2.getParentFile();
          if (parentFile_tFileOutputExcel_2 != null && !parentFile_tFileOutputExcel_2.exists()) {
        	
             parentFile_tFileOutputExcel_2.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_2.setEncoding("UTF-8");
		writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_2)), 
            		true, 
            		workbookSettings_tFileOutputExcel_2);

        writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.getSheet("Sheet1");
        if(writableSheet_tFileOutputExcel_2 == null){
        	writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.createSheet("Sheet1", writeableWorkbook_tFileOutputExcel_2.getNumberOfSheets());
		}


        //modif start
        int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_2 = new int[18];
		for(int i_tFileOutputExcel_2=0;i_tFileOutputExcel_2<18;i_tFileOutputExcel_2++){
		    int fitCellViewSize_tFileOutputExcel_2=writableSheet_tFileOutputExcel_2.getColumnView(i_tFileOutputExcel_2).getSize();
			fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2]=fitCellViewSize_tFileOutputExcel_2/256;
			if(fitCellViewSize_tFileOutputExcel_2%256!=0){
				fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2]+=1;
			}
		}
		
		jxl.write.WritableFont wf_tFileOutputExcel_2 = new jxl.write.WritableFont(jxl.write.WritableFont.COURIER, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_tFileOutputExcel_2  = new jxl.write.WritableCellFormat(wf_tFileOutputExcel_2); 
		


		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
userStruct user_tmp = new userStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	


	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
                boolean isTimeZoneNull_tDBInput_2 = false;
				boolean isConnectionWrapped_tDBInput_2 = !(conn_tDBInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tDBInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_2 = null;
                if (isConnectionWrapped_tDBInput_2) {
					unwrappedOraConn_tDBInput_2 = conn_tDBInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tDBInput_2 != null) {
                        isTimeZoneNull_tDBInput_2 = (unwrappedOraConn_tDBInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tDBInput_2 = (((oracle.jdbc.OracleConnection)conn_tDBInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tDBInput_2) {
					java.sql.Statement stmtGetTZ_tDBInput_2 = conn_tDBInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_2 = stmtGetTZ_tDBInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tDBInput_2.next()) {
						sessionTimezone_tDBInput_2 = rsGetTZ_tDBInput_2.getString(1);
					}
					if (isConnectionWrapped_tDBInput_2 && unwrappedOraConn_tDBInput_2 != null) {
                        unwrappedOraConn_tDBInput_2.setSessionTimeZone(sessionTimezone_tDBInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tDBInput_2).setSessionTimeZone(sessionTimezone_tDBInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT '구분' AS GUBUN,\n       '예약일자' AS RSRVDD,\n       '진료과' AS ORDDEPTNM, --진료과\n       '진료의사' AS ORDDRNM,   --진료의사\n"
+"       '환자ID' AS PID,    --등록번호\n       '환자명' AS HNGNM,  --성명\n       '주민번호' AS RRGSTNO,   --주민번호\n       '연락처' AS HOMET"
+"EL,    -- 연락처\n       '휴대폰' AS MPPHONTEL,    -- 휴대폰\n       '접수일자' AS ACPTDD,    --접수일자\n       '진료일자' AS ORDDD,    --진료"
+"일자\n       '진료시간' AS ORDTM,    --시간\n       '예약구분' AS RSRVFLAG,  --예약구분\n       '초재진' AS FSEXAMFLAG,  --초재진\n       '처방코"
+"드' PRCPCD,   --처방코드\n       '처방명' PRCPNM,   --처방명칭\n       '시행부서' EXECDEPTNM,   --시행부서\n       '전송내역' AS REMFACT --전송내역"
+"\n  FROM DUAL\nUNION ALL\nSELECT DISTINCT '입원예약' AS GUGUN,\n       A.PATINHOPEDD AS RSRVDD,\n       COM.FN_ZS_GETDEPTNAME"
+"(A.INSTCD, A.ORDDEPTCD, A.PATINHOPEDD) AS ORDDEPTNM, --진료과\n       COM.FN_ZS_GETUSERNM(A.ORDDRID, A.INDIRECDD) AS ORDDRN"
+"M,   --진료의사\n       A.PID AS PID,    --등록번호\n       E.HNGNM,  --성명\n       E.RRGSTNO1 || SUBSTR(E.RRGSTNO2,0,1)||'******"
+"' AS RRGSTNO,   --주민번호\n       E.HOMETEL AS HOMETEL,    -- 연락처\n       E.MPPHONTEL AS MPPHONTEL,    -- 휴대폰\n       '' AS"
+" ACPTDD,    --접수일자\n       A.PATINHOPEDD AS ORDDD,    --진료일자\n       '' AS ORDTM,    --시간\n       '' AS RSRVFLAG,  --예약구"
+"분\n       '' AS FSEXAMFLAG,  --초재진\n       '' AS PRCPCD,   --처방코드\n       '' AS PRCPNM,   --처방명칭\n       '' AS EXECDEPTN"
+"M,   --시행부서\n       (SELECT Y.TMP31 FROM PAM.SERVICECOOP Y WHERE Y.TMP01 = 'ZIKA' AND Y.TMP02 = E.RRGSTNO1 AND Y.TMP03 ="
+" E.RRGSTNO2 AND Y.TMP11 = 'Y' AND ROWNUM =1 ) AS REMFACT --전송내역\n  FROM PAM.PMIHADRV A, PAM.PMCMPTBS B, PAM.PMIHINPT C, "
+"PAM.PMCMPTBS E\n WHERE A.PID = B.PID\n   AND A.INSTCD = B.INSTCD\n   AND A.INSTCD = '014'\n   AND A.INSTCD = E.INSTCD\n "
+"  AND A.PID = E.PID\n   AND C.INSTCD(+) = A.INSTCD\n   AND C.PID(+) = A.PID\n   AND C.HISTSTAT(+) = 'Y'\n   AND C.INDSCH"
+"ACPTSTAT(+) = 'A'\n   AND C.DSCHDD(+) = '99991231'\n   AND C.ORDTYPE(+) = 'I'\n   AND A.INRSRVSTAT IN ('S','R')\n   AND "
+"A.INFLAG = 'G'\n   AND A.ERREGLYN IN ('I','F','R','G','D')\n   AND A.PATINHOPEDD BETWEEN TO_CHAR(SYSDATE + 1, 'YYYYMMDD'"
+") AND (SELECT MIN(BASEDD) FROM PAM.PMBMHSCH WHERE BASEDD > TO_CHAR(SYSDATE, 'YYYYMMDD') AND HISTSTAT = 'Y' AND DUTFLAG ="
+" '0')\n   AND EXISTS\n       (SELECT Y.TMP04\n          FROM PAM.SERVICECOOP Y\n         WHERE Y.TMP01 = 'ZIKA'\n       "
+"    AND Y.TMP11 = 'Y'\n           AND Y.TMP02 = E.RRGSTNO1\n           AND Y.TMP03 = E.RRGSTNO2\n           AND Y.TMP10 "
+"= E.PID)";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.GUBUN = null;
							} else {
	                         		
        	row1.GUBUN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.RSRVDD = null;
							} else {
	                         		
        	row1.RSRVDD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.ORDDEPTNM = null;
							} else {
	                         		
        	row1.ORDDEPTNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.ORDDRNM = null;
							} else {
	                         		
        	row1.ORDDRNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.PID = null;
							} else {
	                         		
        	row1.PID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row1.HNGNM = null;
							} else {
	                         		
        	row1.HNGNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row1.RRGSTNO = null;
							} else {
	                         		
        	row1.RRGSTNO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row1.HOMETEL = null;
							} else {
	                         		
        	row1.HOMETEL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row1.MPPHONTEL = null;
							} else {
	                         		
        	row1.MPPHONTEL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row1.ACPTDD = null;
							} else {
	                         		
        	row1.ACPTDD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row1.ORDDD = null;
							} else {
	                         		
        	row1.ORDDD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row1.ORDTM = null;
							} else {
	                         		
        	row1.ORDTM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row1.RSRVFLAG = null;
							} else {
	                         		
        	row1.RSRVFLAG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row1.FSEXAMFLAG = null;
							} else {
	                         		
        	row1.FSEXAMFLAG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row1.PRCPCD = null;
							} else {
	                         		
        	row1.PRCPCD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row1.PRCPNM = null;
							} else {
	                         		
        	row1.PRCPNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row1.EXECDEPTNM = null;
							} else {
	                         		
        	row1.EXECDEPTNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row1.REMFACT = null;
							} else {
	                         		
        	row1.REMFACT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
		                    }
					




 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

user = null;


// # Output table : 'user'
user_tmp.GUBUN = row1.GUBUN ;
user_tmp.RSRVDD = row1.RSRVDD ;
user_tmp.ORDDEPTNM = row1.ORDDEPTNM ;
user_tmp.ORDDRNM = row1.ORDDRNM ;
user_tmp.PID = row1.PID ;
user_tmp.HNGNM = row1.HNGNM;
user_tmp.RRGSTNO = row1.RRGSTNO;
user_tmp.HOMETEL = row1.HOMETEL;
user_tmp.MPPHONTEL = row1.MPPHONTEL;
user_tmp.ACPTDD = row1.ACPTDD;
user_tmp.ORDDD = row1.ORDDD;
user_tmp.ORDTM = row1.ORDTM;
user_tmp.RSRVFLAG = row1.RSRVFLAG;
user_tmp.FSEXAMFLAG = row1.FSEXAMFLAG;
user_tmp.PRCPCD = row1.PRCPCD;
user_tmp.PRCPNM = row1.PRCPNM;
user_tmp.EXECDEPTNM = row1.EXECDEPTNM;
user_tmp.REMFACT = row1.REMFACT;
user = user_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "user"
if(user != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"user");
					}
					

								   				
	    				if(user.GUBUN != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.GUBUN
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_0_tFileOutputExcel_2);
							int currentWith_0_tFileOutputExcel_2 = cell_0_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[0]=fitWidth_tFileOutputExcel_2[0]>currentWith_0_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[0]:currentWith_0_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.RSRVDD != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.RSRVDD
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_1_tFileOutputExcel_2);
							int currentWith_1_tFileOutputExcel_2 = cell_1_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[1]=fitWidth_tFileOutputExcel_2[1]>currentWith_1_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[1]:currentWith_1_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.ORDDEPTNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.ORDDEPTNM
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_2_tFileOutputExcel_2);
							int currentWith_2_tFileOutputExcel_2 = cell_2_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[2]=fitWidth_tFileOutputExcel_2[2]>currentWith_2_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[2]:currentWith_2_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.ORDDRNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.ORDDRNM
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_3_tFileOutputExcel_2);
							int currentWith_3_tFileOutputExcel_2 = cell_3_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[3]=fitWidth_tFileOutputExcel_2[3]>currentWith_3_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[3]:currentWith_3_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.PID != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.PID
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_4_tFileOutputExcel_2);
							int currentWith_4_tFileOutputExcel_2 = cell_4_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[4]=fitWidth_tFileOutputExcel_2[4]>currentWith_4_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[4]:currentWith_4_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.HNGNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.HNGNM
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_5_tFileOutputExcel_2);
							int currentWith_5_tFileOutputExcel_2 = cell_5_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[5]=fitWidth_tFileOutputExcel_2[5]>currentWith_5_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[5]:currentWith_5_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.RRGSTNO != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.RRGSTNO
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_6_tFileOutputExcel_2);
							int currentWith_6_tFileOutputExcel_2 = cell_6_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[6]=fitWidth_tFileOutputExcel_2[6]>currentWith_6_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[6]:currentWith_6_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.HOMETEL != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.HOMETEL
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_7_tFileOutputExcel_2);
							int currentWith_7_tFileOutputExcel_2 = cell_7_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[7]=fitWidth_tFileOutputExcel_2[7]>currentWith_7_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[7]:currentWith_7_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.MPPHONTEL != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 8;
					

					
						jxl.write.WritableCell cell_8_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.MPPHONTEL
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_8_tFileOutputExcel_2);
							int currentWith_8_tFileOutputExcel_2 = cell_8_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[8]=fitWidth_tFileOutputExcel_2[8]>currentWith_8_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[8]:currentWith_8_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.ACPTDD != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 9;
					

					
						jxl.write.WritableCell cell_9_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.ACPTDD
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_9_tFileOutputExcel_2);
							int currentWith_9_tFileOutputExcel_2 = cell_9_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[9]=fitWidth_tFileOutputExcel_2[9]>currentWith_9_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[9]:currentWith_9_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.ORDDD != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 10;
					

					
						jxl.write.WritableCell cell_10_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.ORDDD
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_10_tFileOutputExcel_2);
							int currentWith_10_tFileOutputExcel_2 = cell_10_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[10]=fitWidth_tFileOutputExcel_2[10]>currentWith_10_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[10]:currentWith_10_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.ORDTM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 11;
					

					
						jxl.write.WritableCell cell_11_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.ORDTM
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_11_tFileOutputExcel_2);
							int currentWith_11_tFileOutputExcel_2 = cell_11_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[11]=fitWidth_tFileOutputExcel_2[11]>currentWith_11_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[11]:currentWith_11_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.RSRVFLAG != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 12;
					

					
						jxl.write.WritableCell cell_12_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.RSRVFLAG
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_12_tFileOutputExcel_2);
							int currentWith_12_tFileOutputExcel_2 = cell_12_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[12]=fitWidth_tFileOutputExcel_2[12]>currentWith_12_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[12]:currentWith_12_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.FSEXAMFLAG != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 13;
					

					
						jxl.write.WritableCell cell_13_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.FSEXAMFLAG
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_13_tFileOutputExcel_2);
							int currentWith_13_tFileOutputExcel_2 = cell_13_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[13]=fitWidth_tFileOutputExcel_2[13]>currentWith_13_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[13]:currentWith_13_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.PRCPCD != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 14;
					

					
						jxl.write.WritableCell cell_14_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.PRCPCD
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_14_tFileOutputExcel_2);
							int currentWith_14_tFileOutputExcel_2 = cell_14_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[14]=fitWidth_tFileOutputExcel_2[14]>currentWith_14_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[14]:currentWith_14_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.PRCPNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 15;
					

					
						jxl.write.WritableCell cell_15_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.PRCPNM
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_15_tFileOutputExcel_2);
							int currentWith_15_tFileOutputExcel_2 = cell_15_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[15]=fitWidth_tFileOutputExcel_2[15]>currentWith_15_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[15]:currentWith_15_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.EXECDEPTNM != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 16;
					

					
						jxl.write.WritableCell cell_16_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.EXECDEPTNM
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_16_tFileOutputExcel_2);
							int currentWith_16_tFileOutputExcel_2 = cell_16_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[16]=fitWidth_tFileOutputExcel_2[16]>currentWith_16_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[16]:currentWith_16_tFileOutputExcel_2+2;
	    				} 
					
								   				
	    				if(user.REMFACT != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_2 = 17;
					

					
						jxl.write.WritableCell cell_17_tFileOutputExcel_2 = new jxl.write.Label(columnIndex_tFileOutputExcel_2, startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,
					
//modif end
								user.REMFACT
						,format_tFileOutputExcel_2
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_2.addCell(cell_17_tFileOutputExcel_2);
							int currentWith_17_tFileOutputExcel_2 = cell_17_tFileOutputExcel_2.getContents().trim().length();
							fitWidth_tFileOutputExcel_2[17]=fitWidth_tFileOutputExcel_2[17]>currentWith_17_tFileOutputExcel_2?fitWidth_tFileOutputExcel_2[17]:currentWith_17_tFileOutputExcel_2+2;
	    				} 
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "user"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}

globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

							columnIndex_tFileOutputExcel_2 = 0;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[0]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 1;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[1]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 2;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[2]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 3;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[3]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 4;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[4]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 5;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[5]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 6;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[6]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 7;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[7]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 8;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[8]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 9;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[9]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 10;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[10]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 11;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[11]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 12;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[12]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 13;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[13]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 14;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[14]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 15;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[15]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 16;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[16]);
		
	//modif end
	
							columnIndex_tFileOutputExcel_2 = 17;
						
	//modif start
		
			writableSheet_tFileOutputExcel_2.setColumnView(columnIndex_tFileOutputExcel_2, fitWidth_tFileOutputExcel_2[17]);
		
	//modif end
	
		writeableWorkbook_tFileOutputExcel_2.write();
		writeableWorkbook_tFileOutputExcel_2.close();
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"user");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tSystem_1Process(globalMap);



/**
 * [tFileOutputExcel_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tSystem_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSystem_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSystem_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSystem_1", false);
		start_Hash.put("tSystem_1", System.currentTimeMillis());
		
	
	currentComponent="tSystem_1";

	
		int tos_count_tSystem_1 = 0;
		

Runtime runtime_tSystem_1 = Runtime.getRuntime();

String[] env_tSystem_1= null;
java.util.Map<String,String> envMap_tSystem_1= System.getenv();
java.util.Map<String,String> envMapClone_tSystem_1= new java.util.HashMap();
envMapClone_tSystem_1.putAll(envMap_tSystem_1);

	
final Process ps_tSystem_1 = runtime_tSystem_1.exec( "cmd /c java -Dfile.encoding=UTF-8 -jar CompactCTalkSender.jar " + context.in_user + " " + context.in_password + " " + context.in_roomno + " D:/data/DurBatch/해외감염병정보_입원_"+TalendDate.formatDate("yyyyMMdd", new Date()) + ".xls" ,env_tSystem_1,new java.io.File("D:/data/DurBatch/CompactCTalkSender"));

globalMap.remove("tSystem_1_OUTPUT");
globalMap.remove("tSystem_1_ERROROUTPUT");

Thread normal_tSystem_1 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_1.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.out.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
normal_tSystem_1.start();

Thread error_tSystem_1 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_1.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
error_tSystem_1.start();
if(ps_tSystem_1.getOutputStream()!=null){
    ps_tSystem_1.getOutputStream().close();
}
ps_tSystem_1.waitFor();
normal_tSystem_1.join(10000);
error_tSystem_1.join(10000);


 



/**
 * [tSystem_1 begin ] stop
 */
	
	/**
	 * [tSystem_1 main ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	


 


	tos_count_tSystem_1++;

/**
 * [tSystem_1 main ] stop
 */
	
	/**
	 * [tSystem_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 process_data_begin ] stop
 */
	
	/**
	 * [tSystem_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 process_data_end ] stop
 */
	
	/**
	 * [tSystem_1 end ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

globalMap.put("tSystem_1_EXIT_VALUE", ps_tSystem_1.exitValue());

 

ok_Hash.put("tSystem_1", true);
end_Hash.put("tSystem_1", System.currentTimeMillis());




/**
 * [tSystem_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSystem_1 finally ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSystem_1_SUBPROCESS_STATE", 1);
	}
	

public void tSystem_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSystem_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSystem_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tSystem_4", false);
		start_Hash.put("tSystem_4", System.currentTimeMillis());
		
	
	currentComponent="tSystem_4";

	
		int tos_count_tSystem_4 = 0;
		

Runtime runtime_tSystem_4 = Runtime.getRuntime();

String[] env_tSystem_4= null;
java.util.Map<String,String> envMap_tSystem_4= System.getenv();
java.util.Map<String,String> envMapClone_tSystem_4= new java.util.HashMap();
envMapClone_tSystem_4.putAll(envMap_tSystem_4);

	
final Process ps_tSystem_4 = runtime_tSystem_4.exec( "cmd /c java -Dfile.encoding=UTF-8 -jar CompactCTalkSender.jar " + context.in_user + " " + context.in_password + " " + context.in_roomno + " D:/data/DurBatch/CompactCTalkSender/none.txt" ,env_tSystem_4,new java.io.File("D:/data/DurBatch/CompactCTalkSender"));

globalMap.remove("tSystem_4_OUTPUT");
globalMap.remove("tSystem_4_ERROROUTPUT");

Thread normal_tSystem_4 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_4.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.out.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
normal_tSystem_4.start();

Thread error_tSystem_4 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_4.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
error_tSystem_4.start();
if(ps_tSystem_4.getOutputStream()!=null){
    ps_tSystem_4.getOutputStream().close();
}
ps_tSystem_4.waitFor();
normal_tSystem_4.join(10000);
error_tSystem_4.join(10000);


 



/**
 * [tSystem_4 begin ] stop
 */
	
	/**
	 * [tSystem_4 main ] start
	 */

	

	
	
	currentComponent="tSystem_4";

	


 


	tos_count_tSystem_4++;

/**
 * [tSystem_4 main ] stop
 */
	
	/**
	 * [tSystem_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSystem_4";

	

 



/**
 * [tSystem_4 process_data_begin ] stop
 */
	
	/**
	 * [tSystem_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tSystem_4";

	

 



/**
 * [tSystem_4 process_data_end ] stop
 */
	
	/**
	 * [tSystem_4 end ] start
	 */

	

	
	
	currentComponent="tSystem_4";

	

globalMap.put("tSystem_4_EXIT_VALUE", ps_tSystem_4.exitValue());

 

ok_Hash.put("tSystem_4", true);
end_Hash.put("tSystem_4", System.currentTimeMillis());




/**
 * [tSystem_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSystem_4 finally ] start
	 */

	

	
	
	currentComponent="tSystem_4";

	

 



/**
 * [tSystem_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSystem_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DurToExcelAndCtalk_IN DurToExcelAndCtalk_INClass = new DurToExcelAndCtalk_IN();

        int exitCode = DurToExcelAndCtalk_INClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DurToExcelAndCtalk_IN.class.getClassLoader().getResourceAsStream("bucheon/durtoexcelandctalk_in_0_5/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DurToExcelAndCtalk_IN.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("in_user", "id_String");
                            context.in_user=(String) context.getProperty("in_user");
                        context.setContextType("in_password", "id_String");
                            context.in_password=(String) context.getProperty("in_password");
                        context.setContextType("in_roomno", "id_String");
                            context.in_roomno=(String) context.getProperty("in_roomno");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("in_user")) {
                context.in_user = (String) parentContextMap.get("in_user");
            }if (parentContextMap.containsKey("in_password")) {
                context.in_password = (String) parentContextMap.get("in_password");
            }if (parentContextMap.containsKey("in_roomno")) {
                context.in_roomno = (String) parentContextMap.get("in_roomno");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DurToExcelAndCtalk_IN");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     124348 characters generated by Talend Open Studio for Data Integration 
 *     on the 2022년 4월 28일 (목) 오전 10시 56분 57초
 ************************************************************************************************/